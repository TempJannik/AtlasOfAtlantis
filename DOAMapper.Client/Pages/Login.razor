@page "/login"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using DOAMapper.Shared.Services
@using DOAMapper.Shared.Models.Authentication
@inject IAuthenticationService AuthService
@inject IAuthenticationStateService AuthStateService
@inject NavigationManager Navigation

<PageTitle>Login - AoA</PageTitle>

<div class="dragon-login-container">
    <div class="dragon-login-card">
        <div class="dragon-login-header">
            <div class="dragon-logo">🐉</div>
            <h2 class="dragon-title">Dragon Realm Explorer</h2>
            <p class="dragon-subtitle">Navigate the Ancient Territories</p>
        </div>

        <div class="dragon-login-form">
            <div class="dragon-form-group">
                <label for="password" class="dragon-form-label">🔐 Password</label>
                <input type="password"
                       class="dragon-input @(HasError ? "dragon-input-error" : "")"
                       id="password"
                       @bind="Password"
                       @onkeypress="OnKeyPress"
                       placeholder="Enter password"
                       disabled="@IsLoading" />
                @if (HasError)
                {
                    <div class="dragon-error-message">
                        @ErrorMessage
                    </div>
                }
            </div>

            <div class="dragon-form-actions">
                <button type="button"
                        class="dragon-btn dragon-btn-primary dragon-btn-full"
                        @onclick="HandleLogin"
                        disabled="@IsLoading">
                    @if (IsLoading)
                    {
                        <span class="dragon-spinner-sm"></span>
                        <span>Logging in...</span>
                    }
                    else
                    {
                        <span>🚀 Enter Realm</span>
                    }
                </button>
            </div>

            @if (!string.IsNullOrEmpty(SuccessMessage))
            {
                <div class="dragon-success">
                    @SuccessMessage
                </div>
            }
        </div>

        <div class="dragon-login-footer">
            <small class="dragon-text-muted">
                🗝️ Enter your password to access the ancient territories
            </small>
        </div>
    </div>
</div>

@* Dragon theme styles are loaded from server-doamapper.css *@

@code {
    private string Password = string.Empty;
    private bool IsLoading = false;
    private bool HasError = false;
    private string ErrorMessage = string.Empty;
    private string SuccessMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Check if already authenticated and redirect
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (isAuthenticated)
        {
            Navigation.NavigateTo("/players", true);
        }
    }

    private async Task HandleLogin()
    {
        if (string.IsNullOrWhiteSpace(Password))
        {
            ShowError("Password is required");
            return;
        }

        IsLoading = true;
        HasError = false;
        ErrorMessage = string.Empty;
        SuccessMessage = string.Empty;

        try
        {
            var result = await AuthService.LoginAsync(Password);
            
            if (result.Success)
            {
                // Update the state service
                var authState = await AuthService.GetAuthenticationStateAsync();
                AuthStateService.UpdateState(authState);
                
                SuccessMessage = result.Message;
                
                // Small delay to show success message
                await Task.Delay(500);
                
                // Redirect to players page (new home)
                Navigation.NavigateTo("/players", true);
            }
            else
            {
                ShowError(result.Message);
            }
        }
        catch (Exception)
        {
            ShowError("An error occurred during login. Please try again.");
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !IsLoading && !string.IsNullOrWhiteSpace(Password))
        {
            await HandleLogin();
        }
    }

    private void ShowError(string message)
    {
        HasError = true;
        ErrorMessage = message;
        Password = string.Empty; // Clear password on error
    }
}
