@page "/players/{PlayerId}"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using DOAMapper.Shared.Services
@inject IPlayerService PlayerService
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation

<PageTitle>@(Player?.Name ?? "Player Details") - AoA</PageTitle>

<div class="dragon-container">
    @if (Player != null)
    {
        <div class="dragon-content">
            <div class="dragon-detail-header">
                <div class="dragon-detail-title">
                    <h2 class="dragon-item-name">⚔️ @Player.Name</h2>
                    <p class="dragon-text-secondary">🏰 @Player.CityName</p>
                </div>
                <div class="dragon-detail-actions">
                    <DateSelector @bind-SelectedDate="CurrentDate" AvailableDates="AvailableDates" />
                    <a href="/players" class="dragon-btn">← Back to Players</a>
                </div>
            </div>

            <ErrorAlert ErrorMessage="@ErrorMessage" OnErrorCleared="ClearError" />

            <div class="dragon-detail-grid">
                <div class="dragon-stats-card">
                    <h3 class="dragon-card-title">⚔️ Player Stats</h3>
                    <div class="dragon-stats-list">
                        <div class="dragon-stat-item">
                            <span class="dragon-stat-label">🆔 Player ID:</span>
                            <span class="dragon-stat-value">@Player.PlayerId</span>
                        </div>
                        <div class="dragon-stat-item">
                            <span class="dragon-stat-label">💪 Power:</span>
                            <span class="dragon-stat-value dragon-might-value">@Player.Might.ToString("N0")</span>
                        </div>
                        @if (Player.Alliance != null)
                        {
                            <div class="dragon-stat-item">
                                <span class="dragon-stat-label">🛡️ Alliance:</span>
                                <a href="/alliances/@Player.Alliance.AllianceId?date=@CurrentDate?.ToString("yyyy-MM-dd")"
                                   class="dragon-alliance-link">
                                    @Player.Alliance.Name
                                </a>
                            </div>
                        }
                    </div>
                </div>

                <div class="dragon-tiles-card">
                    <h3 class="dragon-card-title">🗺️ Owned Tiles: @(PlayerTiles?.Count ?? 0)</h3>
                    <div class="dragon-tiles-content">
                        @if (PlayerTiles?.Any() == true)
                        {
                            <div class="dragon-tile-summary">
                                @foreach (var tileGroup in PlayerTiles.GroupBy(t => t.Type))
                                {
                                    <div class="dragon-tile-group">
                                        <h4 class="dragon-tile-type">🏞️ @tileGroup.Key (@tileGroup.Count())</h4>
                                        <div class="dragon-tile-list">
                                            @foreach (var tile in tileGroup.Take(10))
                                            {
                                                <span class="dragon-tile-badge" title="Level @tile.Level">
                                                    📍 (@tile.X, @tile.Y) | Lv.@tile.Level
                                                </span>
                                            }
                                            @if (tileGroup.Count() > 10)
                                            {
                                                <span class="dragon-text-muted">... and @(tileGroup.Count() - 10) more</span>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <p class="dragon-text-muted">🚫 No tiles owned by this player.</p>
                        }
                    </div>
                </div>
            </div>

            @if (PlayerHistory?.Any() == true)
            {
                <div class="dragon-history-card">
                    <h3 class="dragon-card-title">📈 Player History</h3>
                    <div class="dragon-history-content">
                        <PlayerHistoryChart Data="PlayerHistory" />
                    </div>
                </div>
            }
        </div>
    }
    else if (IsLoading)
    {
        <LoadingSpinner LoadingText="Loading player details..." />
    }
    else
    {
        <div class="dragon-error">
            ⚠️ Player not found for the selected date.
        </div>
    }
</div>

@code {
    [Parameter] public string PlayerId { get; set; } = string.Empty;
    [SupplyParameterFromQuery] public string? Date { get; set; }

    private DateTime? CurrentDate;
    private bool IsLoading = true;
    private string? ErrorMessage;

    private PlayerDetailDto? Player;
    private List<TileDto>? PlayerTiles;
    private List<HistoryEntryDto<PlayerDto>>? PlayerHistory;
    private List<DateTime> AvailableDates = new();

    protected override async Task OnInitializedAsync()
    {
        // Check authentication first
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (!isAuthenticated)
        {
            Navigation.NavigateTo("/login", true);
            return;
        }

        try
        {
            AvailableDates = await PlayerService.GetAvailableDatesAsync();

            if (!string.IsNullOrEmpty(Date) && DateTime.TryParse(Date, out var parsedDate))
            {
                CurrentDate = parsedDate;
            }
            else if (AvailableDates.Any())
            {
                CurrentDate = AvailableDates.First();
            }

            await LoadPlayerData();
        }
        catch (Exception)
        {
            ErrorMessage = "Failed to initialize player details. Please try again.";
            IsLoading = false;
        }
    }

    private async Task LoadPlayerData()
    {
        if (!CurrentDate.HasValue) return;

        IsLoading = true;
        ErrorMessage = null;
        try
        {
            Player = await PlayerService.GetPlayerAsync(PlayerId, CurrentDate.Value);
            PlayerTiles = await PlayerService.GetPlayerTilesAsync(PlayerId, CurrentDate.Value);

            // Always load history
            if (PlayerHistory == null)
            {
                PlayerHistory = await PlayerService.GetPlayerHistoryAsync(PlayerId);
            }
        }
        catch (Exception)
        {
            ErrorMessage = "Failed to load player data. Please try again.";
        }
        finally
        {
            IsLoading = false;
        }
    }



    private void ClearError()
    {
        ErrorMessage = null;
    }
}
