@page "/players/{RealmId}/{PlayerId}"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using DOAMapper.Shared.Services
@using DOAMapper.Shared.Models.DTOs
@using DOAMapper.Client.Services
@using Microsoft.AspNetCore.Components
@inject IPlayerService PlayerService
@inject IRealmService RealmService
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@inject DateStateService DateState
@inject RealmStateService RealmState
@implements IDisposable

<PageTitle>@(Player?.Name ?? "Player Details") - AoA</PageTitle>

<div class="dragon-container">
    @if (Player != null)
    {
        <div class="dragon-content">
            <div class="dragon-detail-header">
                <div class="dragon-detail-title">
                    <h2 class="dragon-item-name">⚔️ @Player.Name</h2>
                    <p class="dragon-text-secondary">🏰 @Player.CityName</p>
                </div>
                <div class="dragon-detail-actions">
                    <DateSelector AvailableDates="AvailableDates" />
                    <a href="/players" class="dragon-btn">← Back to Players</a>
                </div>
            </div>

            <ErrorAlert ErrorMessage="@ErrorMessage" OnErrorCleared="ClearError" />

            <div class="dragon-detail-grid">
                <div class="dragon-stats-card">
                    <h3 class="dragon-card-title">⚔️ Player Stats</h3>
                    <div class="dragon-stats-list">
                        <div class="dragon-stat-item">
                            <span class="dragon-stat-label">🆔 Player ID:</span>
                            <span class="dragon-stat-value">@Player.PlayerId</span>
                        </div>
                        <div class="dragon-stat-item">
                            <span class="dragon-stat-label">💪 Power:</span>
                            <span class="dragon-stat-value dragon-might-value">@Player.Might.ToString("N0")</span>
                        </div>
                        @if (Player.Alliance != null)
                        {
                            <div class="dragon-stat-item">
                                <span class="dragon-stat-label">🛡️ Alliance:</span>
                                <a href="/alliances/@RealmId/@Player.Alliance.AllianceId?date=@DateState.SelectedDate?.ToString("yyyy-MM-dd")"
                                   class="dragon-alliance-link">
                                    @Player.Alliance.Name
                                </a>
                            </div>
                        }
                    </div>
                </div>

                <div class="dragon-tiles-card">
                    <h3 class="dragon-card-title">🗺️ Owned Tiles: @(PlayerTiles?.Count ?? 0)</h3>
                    <div class="dragon-tiles-content">
                        @if (PlayerTiles?.Any() == true)
                        {
                            <div class="dragon-tile-summary">
                                @foreach (var tileGroup in PlayerTiles.GroupBy(t => t.Type))
                                {
                                    <div class="dragon-tile-group">
                                        <h4 class="dragon-tile-type">🏞️ @tileGroup.Key (@tileGroup.Count())</h4>
                                        <div class="dragon-tile-list">
                                            @foreach (var tile in tileGroup.Take(10))
                                            {
                                                <span class="dragon-tile-badge" title="Level @tile.Level">
                                                    📍 (@tile.X, @tile.Y) | Lv.@tile.Level
                                                </span>
                                            }
                                            @if (tileGroup.Count() > 10)
                                            {
                                                <span class="dragon-text-muted">... and @(tileGroup.Count() - 10) more</span>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <p class="dragon-text-muted">🚫 No tiles owned by this player.</p>
                        }
                    </div>
                </div>
            </div>

            @if (PlayerHistory?.Any() == true)
            {
                <div class="dragon-history-card">
                    <h3 class="dragon-card-title">📈 Player History</h3>
                    <div class="dragon-history-content">
                        <PlayerHistoryChart Data="PlayerHistory" />
                    </div>
                </div>
            }
        </div>
    }
    else if (IsLoading)
    {
        <LoadingSpinner LoadingText="Loading player details..." />
    }
    else
    {
        <div class="dragon-error">
            ⚠️ Player not found for the selected date.
        </div>
    }
</div>

@code {
    [Parameter] public string RealmId { get; set; } = string.Empty;
    [Parameter] public string PlayerId { get; set; } = string.Empty;
    [SupplyParameterFromQuery] public string? Date { get; set; }

    private bool IsLoading = true;
    private string? ErrorMessage;

    private PlayerDetailDto? Player;
    private List<TileDto>? PlayerTiles;
    private List<HistoryEntryDto<PlayerDto>>? PlayerHistory;
    private List<DateTime> AvailableDates = new();

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to date changes
        DateState.DateChanged += OnDateStateChanged;

        try
        {
            // Initialize realm state first
            await InitializeRealmStateAsync();

            if (RealmState.SelectedRealm != null)
            {
                AvailableDates = await PlayerService.GetAvailableDatesAsync(RealmState.SelectedRealm.RealmId);

                // Only set available dates if they're not already set globally
                if (!DateState.AvailableDates.Any())
                {
                    DateState.SetAvailableDates(AvailableDates);
                }

                if (!string.IsNullOrEmpty(Date) && DateTime.TryParse(Date, out var parsedDate))
                {
                    DateState.SetSelectedDate(parsedDate);
                }
                else if (!DateState.SelectedDate.HasValue && AvailableDates.Any())
                {
                    DateState.SetSelectedDate(AvailableDates.First());
                }

                await LoadPlayerData();
            }
        }
        catch (Exception)
        {
            ErrorMessage = "Failed to initialize player details. Please try again.";
            IsLoading = false;
        }
    }

    private async Task LoadPlayerData()
    {
        if (!DateState.SelectedDate.HasValue)
        {
            Console.WriteLine("PlayerDetails: LoadPlayerData called but no date selected");
            return;
        }

        Console.WriteLine($"PlayerDetails: LoadPlayerData called for date: {DateState.SelectedDate.Value}");
        IsLoading = true;
        ErrorMessage = null;
        try
        {
            if (!string.IsNullOrEmpty(RealmId))
            {
                Player = await PlayerService.GetPlayerAsync(PlayerId, RealmId, DateState.SelectedDate.Value);
                PlayerTiles = await PlayerService.GetPlayerTilesAsync(PlayerId, RealmId, DateState.SelectedDate.Value);
            Console.WriteLine($"PlayerDetails: Loaded player {Player?.Name} with {PlayerTiles?.Count} tiles for date {DateState.SelectedDate.Value}");

                // Always load history
                if (PlayerHistory == null)
                {
                    PlayerHistory = await PlayerService.GetPlayerHistoryAsync(PlayerId, RealmId);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"PlayerDetails: Error loading data: {ex.Message}");
            ErrorMessage = "Failed to load player data. Please try again.";
        }
        finally
        {
            IsLoading = false;
            StateHasChanged(); // Ensure UI updates when loading completes
        }
    }

    private async Task InitializeRealmStateAsync()
    {
        try
        {
            var availableRealms = await RealmService.GetAvailableRealmsAsync();
            RealmState.SetAvailableRealms(availableRealms);

            // If no realm is selected, select the first available realm or create default
            if (RealmState.SelectedRealm == null && availableRealms.Any())
            {
                RealmState.SetSelectedRealm(availableRealms.First());
            }
            else if (RealmState.SelectedRealm == null)
            {
                // Get available realms if none are loaded
                var realms = await RealmService.GetAvailableRealmsAsync();
                if (realms.Any())
                {
                    RealmState.SetAvailableRealms(realms);
                    RealmState.SetSelectedRealm(realms.First());
                }
            }
        }
        catch (Exception)
        {
            // If realm initialization fails, we can't proceed
            ErrorMessage = "Failed to initialize realm information.";
        }
    }

    private async void OnDateStateChanged(DateTime? newDate)
    {
        Console.WriteLine($"PlayerDetails: OnDateStateChanged called with date: {newDate}");
        await InvokeAsync(async () =>
        {
            Console.WriteLine($"PlayerDetails: About to reload data for date: {DateState.SelectedDate}");
            await LoadPlayerData();
            Console.WriteLine($"PlayerDetails: Data reloaded for date: {DateState.SelectedDate}");
            StateHasChanged(); // Force UI update AFTER data is loaded
        });
    }

    private void ClearError()
    {
        ErrorMessage = null;
    }

    public void Dispose()
    {
        DateState.DateChanged -= OnDateStateChanged;
    }
}
