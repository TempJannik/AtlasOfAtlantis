@* @page "/alliances/{AllianceId}" *@
@* @rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false)) *@
@using DOAMapper.Shared.Services
@using DOAMapper.Shared.Models.DTOs
@using DOAMapper.Client.Services
@using Microsoft.AspNetCore.Components
@inject IAllianceService AllianceService
@inject IRealmService RealmService
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@inject DateStateService DateState
@inject RealmStateService RealmState
@implements IDisposable

<PageTitle>@(Alliance?.Name ?? "Alliance Details") - AoA</PageTitle>

<div class="dragon-container">
    @if (Alliance != null)
    {
        <div class="dragon-content">
            <div class="dragon-detail-header">
                <div class="dragon-detail-title">
                    <h2 class="dragon-item-name">🛡️ @Alliance.Name</h2>
                    <p class="dragon-text-secondary">👑 Led by @Alliance.OverlordName</p>
                </div>
                <div class="dragon-detail-actions">
                    <DateSelector AvailableDates="AvailableDates" />
                    <a href="/alliances" class="dragon-btn">← Back to Alliances</a>
                </div>
            </div>

            <ErrorAlert ErrorMessage="@ErrorMessage" OnErrorCleared="ClearError" />

            <div class="dragon-detail-grid">
                <div class="dragon-stats-card">
                    <h3 class="dragon-card-title">🛡️ Alliance Stats</h3>
                    <div class="dragon-stats-list">
                        <div class="dragon-stat-item">
                            <span class="dragon-stat-label">🆔 Alliance ID:</span>
                            <span class="dragon-stat-value">@Alliance.AllianceId</span>
                        </div>
                        <div class="dragon-stat-item">
                            <span class="dragon-stat-label">⚡ Power:</span>
                            <span class="dragon-stat-value dragon-power-value">@Alliance.Power.ToString("N0")</span>
                        </div>
                        <div class="dragon-stat-item">
                            <span class="dragon-stat-label">👥 Members:</span>
                            <span class="dragon-stat-value">@Alliance.MemberCount</span>
                        </div>
                        <div class="dragon-stat-item">
                            <span class="dragon-stat-label">🏰 Fortress:</span>
                            <span class="dragon-stat-value">Level @Alliance.FortressLevel</span>
                        </div>
                        <div class="dragon-stat-item">
                            <span class="dragon-stat-label">📍 Location:</span>
                            <span class="dragon-stat-value">(@Alliance.FortressX, @Alliance.FortressY)</span>
                        </div>
                    </div>
                </div>

                <div class="dragon-members-card">
                    <h3 class="dragon-card-title">👥 Members: @(AllianceMembers?.TotalCount ?? 0)</h3>
                    <div class="dragon-members-content">
                        @if (IsLoadingMembers)
                        {
                            <LoadingSpinner LoadingText="Loading members..." />
                        }
                        else if (AllianceMembers?.Items?.Any() == true)
                        {
                            <div class="dragon-member-list">
                                @foreach (var member in AllianceMembers.Items)
                                {
                                    <div class="dragon-list-item dragon-member-item-slim" @onclick="() => NavigateToPlayer(member.PlayerId)">
                                        <div class="dragon-item-header">
                                            <span class="dragon-item-name">⚔️ @member.Name</span>
                                            <div class="dragon-item-badge">
                                                @member.Might.ToString("N0")
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>

                            <Pagination CurrentPage="CurrentMemberPage" TotalPages="AllianceMembers.TotalPages"
                                       OnPageChanged="OnMemberPageChanged" />
                        }
                        else
                        {
                            <p class="dragon-text-muted">🚫 No members found for this alliance.</p>
                        }
                    </div>
                </div>
            </div>

            @if (AllianceHistory?.Any() == true)
            {
                <div class="dragon-history-card">
                    <h3 class="dragon-card-title">📈 Alliance History</h3>
                    <div class="dragon-history-content">
                        <div class="dragon-history-timeline">
                            @foreach (var entry in AllianceHistory.OrderByDescending(h => h.ValidFrom))
                            {
                                <div class="dragon-timeline-item">
                                    <div class="dragon-timeline-date">
                                        📅 @entry.ValidFrom.ToString("MMM dd, yyyy")
                                    </div>
                                    <div class="dragon-timeline-content">
                                        @{
                                            var changeDescription = GetAllianceChangeDescription(entry, AllianceHistory);
                                        }
                                        @if (!string.IsNullOrEmpty(changeDescription))
                                        {
                                            <div class="dragon-change-badge dragon-change-@GetChangeTypeCssClass(entry.ChangeType)">
                                                @changeDescription
                                            </div>
                                        }
                                        <div class="dragon-alliance-data">
                                            <strong>🛡️ @entry.Data.Name</strong>
                                            <br />
                                        <small class="dragon-text-muted">
                                            ⚡ Power: @entry.Data.Power.ToString("N0") |
                                            👥 Members: @entry.Data.MemberCount |
                                            🏰 Fortress: Level @entry.Data.FortressLevel
                                        </small>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
            }
        </div>
    }
    else if (IsLoading)
    {
        <LoadingSpinner LoadingText="Loading alliance details..." />
    }
    else
    {
        <div class="dragon-error">
            ⚠️ Alliance not found for the selected date.
        </div>
    }
</div>

@* @code { *@
    [Parameter] public string AllianceId { get; set; } = string.Empty;
    [SupplyParameterFromQuery] public string? Date { get; set; }

    private bool IsLoading = true;
    private bool IsLoadingMembers = false;
    private string? ErrorMessage;

    private int CurrentMemberPage = 1;
    private const int MemberPageSize = 6;

    private AllianceDto? Alliance;
    private PagedResult<PlayerDto>? AllianceMembers;
    private List<HistoryEntryDto<AllianceDto>>? AllianceHistory;
    private List<DateTime> AvailableDates = new();

    protected override async Task OnInitializedAsync()
    {
        // Check authentication first
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (!isAuthenticated)
        {
            Navigation.NavigateTo("/login", true);
            return;
        }

        // Subscribe to date changes
        DateState.DateChanged += OnDateStateChanged;

        try
        {
            // Initialize realm state first
            await InitializeRealmStateAsync();

            if (RealmState.SelectedRealm != null)
            {
                AvailableDates = await AllianceService.GetAvailableDatesAsync(RealmState.SelectedRealm.RealmId);

                // Only set available dates if they're not already set globally
                if (!DateState.AvailableDates.Any())
                {
                    DateState.SetAvailableDates(AvailableDates);
                }

                if (!string.IsNullOrEmpty(Date) && DateTime.TryParse(Date, out var parsedDate))
                {
                    DateState.SetSelectedDate(parsedDate);
                }
                else if (!DateState.SelectedDate.HasValue && AvailableDates.Any())
                {
                    DateState.SetSelectedDate(AvailableDates.First());
                }

                await LoadAllianceData();
            }
        }
        catch (Exception)
        {
            ErrorMessage = "Failed to initialize alliance details. Please try again.";
            IsLoading = false;
        }
    }

    private async Task LoadAllianceData()
    {
        if (!DateState.SelectedDate.HasValue)
        {
            Console.WriteLine("AllianceDetails: LoadAllianceData called but no date selected");
            return;
        }

        Console.WriteLine($"AllianceDetails: LoadAllianceData called for date: {DateState.SelectedDate.Value}");
        IsLoading = true;
        ErrorMessage = null;
        try
        {
            if (RealmState.SelectedRealm != null)
            {
                var loadedAlliance = await AllianceService.GetAllianceAsync(AllianceId, RealmState.SelectedRealm.RealmId, DateState.SelectedDate.Value);
            Console.WriteLine($"AllianceDetails: Backend returned alliance {loadedAlliance?.Name} with power {loadedAlliance?.Power:N0} and {loadedAlliance?.MemberCount} members for date {DateState.SelectedDate.Value}");

            Alliance = loadedAlliance;
            Console.WriteLine($"AllianceDetails: Alliance property set to {Alliance?.Name} with power {Alliance?.Power:N0} and {Alliance?.MemberCount} members");

            await LoadMembers();

                // Always load history
                if (AllianceHistory == null && RealmState.SelectedRealm != null)
                {
                    AllianceHistory = await AllianceService.GetAllianceHistoryAsync(AllianceId, RealmState.SelectedRealm.RealmId);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"AllianceDetails: Error loading alliance data: {ex.Message}");
            ErrorMessage = "Failed to load alliance data. Please try again.";
        }
        finally
        {
            IsLoading = false;
            StateHasChanged(); // Ensure UI updates when loading completes
        }
    }

    private async Task LoadMembers()
    {
        if (!DateState.SelectedDate.HasValue) return;

        IsLoadingMembers = true;
        try
        {
            if (RealmState.SelectedRealm != null)
            {
                AllianceMembers = await AllianceService.GetAllianceMembersAsync(AllianceId, RealmState.SelectedRealm.RealmId, DateState.SelectedDate.Value, CurrentMemberPage, MemberPageSize);
        }
        catch (Exception)
        {
            ErrorMessage = "Failed to load alliance members. Please try again.";
        }
        finally
        {
            IsLoadingMembers = false;
            StateHasChanged(); // Ensure UI updates when member loading completes
        }
    }

    private async Task InitializeRealmStateAsync()
    {
        try
        {
            var availableRealms = await RealmService.GetAvailableRealmsAsync();
            RealmState.SetAvailableRealms(availableRealms);

            // If no realm is selected, select the first available realm or create default
            if (RealmState.SelectedRealm == null && availableRealms.Any())
            {
                RealmState.SetSelectedRealm(availableRealms.First());
            }
            else if (RealmState.SelectedRealm == null)
            {
                // Create default realm if none exist
                var defaultRealm = await RealmService.GetOrCreateDefaultRealmAsync();
                RealmState.SetAvailableRealms(new List<RealmDto> { defaultRealm });
                RealmState.SetSelectedRealm(defaultRealm);
            }
        }
        catch (Exception)
        {
            // If realm initialization fails, we can't proceed
            ErrorMessage = "Failed to initialize realm information.";
        }
    }

    private async Task OnMemberPageChanged(int page)
    {
        CurrentMemberPage = page;
        await LoadMembers();
    }

    private void NavigateToPlayer(string playerId)
    {
        Navigation.NavigateTo($"/players/{playerId}?date={DateState.SelectedDate:yyyy-MM-dd}");
    }

    private string GetChangeTypeBadgeColor(string changeType)
    {
        return changeType.ToLower() switch
        {
            "added" => "success",
            "modified" => "warning",
            "removed" => "danger",
            _ => "secondary"
        };
    }

    private void ClearError()
    {
        ErrorMessage = null;
    }

    private string GetChangeTypeCssClass(string changeType)
    {
        return changeType.ToLower() switch
        {
            "added" => "added",
            "modified" => "modified",
            "removed" => "modified", // Use modified styling instead of removed for less alarming appearance
            _ => "modified"
        };
    }

    private string GetAllianceChangeDescription(HistoryEntryDto<AllianceDto> entry, List<HistoryEntryDto<AllianceDto>> allData)
    {
        var orderedData = allData.OrderByDescending(d => d.ValidFrom).ToList();
        var currentIndex = orderedData.IndexOf(entry);

        // For the most recent entry (first in ordered list)
        if (currentIndex == 0)
        {
            // If this is the only entry, it's the first time we've seen this alliance
            if (orderedData.Count == 1)
            {
                return "FIRST SEEN";
            }

            // If there's a previous entry, show what changed from the previous to this one
            if (orderedData.Count > 1)
            {
                var previousEntry = orderedData[1];
                var changes = new List<string>();

                if (entry.Data.Name != previousEntry.Data.Name)
                {
                    changes.Add($"NAME CHANGED FROM '{previousEntry.Data.Name}' TO '{entry.Data.Name}'");
                }

                if (entry.Data.Power != previousEntry.Data.Power)
                {
                    var powerChange = entry.Data.Power - previousEntry.Data.Power;
                    var changeDirection = powerChange > 0 ? "INCREASED" : "DECREASED";
                    changes.Add($"POWER {changeDirection} FROM {previousEntry.Data.Power:N0} TO {entry.Data.Power:N0}");
                }

                if (entry.Data.MemberCount != previousEntry.Data.MemberCount)
                {
                    var memberChange = entry.Data.MemberCount - previousEntry.Data.MemberCount;
                    var changeDirection = memberChange > 0 ? "INCREASED" : "DECREASED";
                    changes.Add($"MEMBERS {changeDirection} FROM {previousEntry.Data.MemberCount} TO {entry.Data.MemberCount}");
                }

                if (entry.Data.OverlordName != previousEntry.Data.OverlordName)
                {
                    changes.Add($"OVERLORD CHANGED FROM '{previousEntry.Data.OverlordName}' TO '{entry.Data.OverlordName}'");
                }

                if (changes.Any())
                {
                    return string.Join("; ", changes);
                }

                return "UPDATED";
            }
        }

        // For older entries, don't show any change description
        return "";
    }

    private async void OnDateStateChanged(DateTime? newDate)
    {
        Console.WriteLine($"AllianceDetails: OnDateStateChanged called with date: {newDate}");
        await InvokeAsync(async () =>
        {
            Console.WriteLine($"AllianceDetails: About to reload alliance data for date: {DateState.SelectedDate}");

            // Force complete refresh by clearing data first
            Alliance = null;
            AllianceMembers = null;
            CurrentMemberPage = 1; // Reset to first page when date changes
            StateHasChanged(); // Update UI to show loading state

            await LoadAllianceData();
            Console.WriteLine($"AllianceDetails: Alliance data reloaded for date: {DateState.SelectedDate}");
            StateHasChanged(); // Force UI update AFTER data is loaded
        });
    }

    public void Dispose()
    {
        DateState.DateChanged -= OnDateStateChanged;
    }
} *@
