@page "/players"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@inject IPlayerService PlayerService
@inject DateStateService DateState
@inject NavigationManager Navigation
@implements IDisposable

<PageTitle>Players - DOAMapper</PageTitle>

<div class="player-search">
    <div class="search-header">
        <h2>Players</h2>
        <DateSelector SelectedDate="CurrentDate" AvailableDates="AvailableDates" SelectedDateChanged="OnDateChanged" />
    </div>
    
    <div class="search-controls">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Search by player name or ID..."
                   value="@SearchQuery" @oninput="OnSearchInput" />
            <span class="input-group-text">
                <i class="bi bi-search"></i>
            </span>
        </div>
    </div>
    
    <ErrorAlert ErrorMessage="@ErrorMessage" OnErrorCleared="ClearError" />
    
    @if (IsLoading)
    {
        <LoadingSpinner LoadingText="@(string.IsNullOrWhiteSpace(SearchQuery) ? "Loading players..." : "Searching players...")" />
    }
    else if (SearchResults?.Items.Any() == true)
    {
        <div class="search-results">
            <div class="results-header">
                @if (string.IsNullOrWhiteSpace(SearchQuery))
                {
                    <span>Showing @SearchResults.TotalCount players (sorted by might)</span>
                }
                else
                {
                    <span>Found @SearchResults.TotalCount players matching "@SearchQuery"</span>
                }
            </div>

            @foreach (var player in SearchResults.Items)
            {
                <div class="player-card" @onclick="() => NavigateToPlayer(player.PlayerId)">
                    <div class="player-info">
                        <h5>@player.Name</h5>
                        <p class="text-muted">@player.CityName</p>
                    </div>
                    <div class="player-stats">
                        <span class="might">Might: @player.Might.ToString("N0")</span>
                        @if (!string.IsNullOrEmpty(player.AllianceName))
                        {
                            <span class="alliance">[@player.AllianceName]</span>
                        }
                    </div>
                </div>
            }

            <Pagination CurrentPage="CurrentPage" TotalPages="SearchResults.TotalPages"
                       OnPageChanged="OnPageChanged" />
        </div>
    }
    else if (!string.IsNullOrEmpty(SearchQuery))
    {
        <div class="alert alert-info">
            No players found matching "@SearchQuery"
        </div>
    }
    else if (SearchResults != null && !SearchResults.Items.Any())
    {
        <div class="alert alert-info">
            No players found for the selected date.
        </div>
    }
</div>

@code {
    private DateTime? CurrentDate => DateState.SelectedDate;
    private string SearchQuery = "";
    private bool IsLoading = false;
    private int CurrentPage = 1;
    private const int PageSize = 20;
    private string? ErrorMessage;
    private Timer? _searchTimer;
    private const int SearchDelayMs = 300; // 300ms debounce delay
    private bool _isPaginating = false;

    private PagedResult<PlayerDto>? SearchResults;
    private List<DateTime> AvailableDates => DateState.AvailableDates;

    protected override async Task OnInitializedAsync()
    {
        DateState.DateChanged += OnDateStateChanged;

        try
        {
            var dates = await PlayerService.GetAvailableDatesAsync();
            DateState.SetAvailableDates(dates);

            // Load all players by default
            if (CurrentDate.HasValue)
            {
                await LoadPlayers();
            }
        }
        catch (Exception)
        {
            ErrorMessage = "Failed to load available dates. Please try again.";
        }
    }
    
    private async Task LoadPlayers()
    {
        if (!CurrentDate.HasValue) return;

        IsLoading = true;
        ErrorMessage = null;
        try
        {
            // Use empty string for SearchQuery to get all players when no search is active
            var query = string.IsNullOrWhiteSpace(SearchQuery) ? "" : SearchQuery;
            SearchResults = await PlayerService.SearchPlayersAsync(query, CurrentDate.Value, CurrentPage, PageSize);
        }
        catch (Exception)
        {
            ErrorMessage = "Failed to load players. Please try again.";
        }
        finally
        {
            IsLoading = false;
        }
    }
    
    private void OnSearchInput(ChangeEventArgs e)
    {
        // Don't interfere if pagination is happening
        if (_isPaginating) return;

        var newSearchQuery = e.Value?.ToString() ?? "";

        // Only reset page to 1 if the search query actually changed
        if (newSearchQuery != SearchQuery)
        {
            SearchQuery = newSearchQuery;
            CurrentPage = 1;
        }

        // Cancel previous timer
        _searchTimer?.Dispose();

        // Start new timer for debounced search
        _searchTimer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                if (!_isPaginating) // Double-check to avoid race conditions
                {
                    await LoadPlayers();
                    StateHasChanged();
                }
            });
        }, null, SearchDelayMs, Timeout.Infinite);
    }



    private async Task OnPageChanged(int page)
    {
        _isPaginating = true;

        // Cancel any pending search timer to prevent interference
        _searchTimer?.Dispose();

        CurrentPage = page;
        await LoadPlayers();

        _isPaginating = false;
    }
    
    private void NavigateToPlayer(string playerId)
    {
        Navigation.NavigateTo($"/players/{playerId}?date={CurrentDate:yyyy-MM-dd}");
    }
    
    private async void OnDateStateChanged(DateTime? newDate)
    {
        await InvokeAsync(async () =>
        {
            CurrentPage = 1; // Reset to page 1 when date changes
            StateHasChanged();
            await LoadPlayers();
        });
    }

    private async Task OnDateChanged()
    {
        CurrentPage = 1; // Reset to page 1 when date changes
        await LoadPlayers();
    }

    private void ClearError()
    {
        ErrorMessage = null;
    }

    public void Dispose()
    {
        DateState.DateChanged -= OnDateStateChanged;
        _searchTimer?.Dispose();
    }
}
