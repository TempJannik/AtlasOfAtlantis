@page "/import"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using DOAMapper.Shared.Services
@using DOAMapper.Client.Components
@inject IImportService ImportService
@inject IJSRuntime JSRuntime

<PageTitle>Import Data - AoA</PageTitle>

<AuthenticationGuard RequireAdmin="true">
    <div class="data-import">
    <div class="import-header">
        <h2>Import Map Data</h2>
        <p class="text-muted">Upload a new JSON file to update the map data</p>
    </div>

    <ErrorAlert ErrorMessage="@ErrorMessage" OnErrorCleared="ClearError" />

    <div class="card">
        <div class="card-body">
            @if (CurrentImport == null)
            {
                <div class="upload-area">
                    <InputFile OnChange="OnFileSelected" accept=".json" class="form-control" />
                    <div class="upload-help">
                        <small class="text-muted">
                            Select a JSON file containing map data. Maximum file size: 100MB
                        </small>
                    </div>
                    @if (SelectedFile != null)
                    {
                        <div class="selected-file mt-3">
                            <p class="mb-2">Selected: @SelectedFile.Name (@(SelectedFile.Size / 1024 / 1024)MB)</p>
                            <button class="btn btn-primary mobile-full-width" @onclick="StartImport" disabled="@IsUploading">
                                @if (IsUploading)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status"></span>
                                    <span>Uploading...</span>
                                }
                                else
                                {
                                    <i class="bi bi-upload me-1"></i>
                                    <span>Start Import</span>
                                }
                            </button>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="import-progress">
                    <h5>Import in Progress</h5>
                    <div class="progress mb-3">
                        <div class="progress-bar" style="width: @(CurrentImport.ProgressPercentage)%">
                            @CurrentImport.ProgressPercentage%
                        </div>
                    </div>
                    <div class="import-stats">
                        <div class="stat">
                            <label>Status:</label>
                            <span class="badge bg-@GetStatusColor(CurrentImport.Status)">
                                @CurrentImport.Status
                            </span>
                        </div>
                        <div class="stat">
                            <label>Records Processed:</label>
                            <span>@CurrentImport.RecordsProcessed.ToString("N0")</span>
                        </div>
                        <div class="stat">
                            <label>Records Changed:</label>
                            <span>@CurrentImport.RecordsChanged.ToString("N0")</span>
                        </div>
                    </div>
                    @if (CurrentImport.Status == ImportStatus.Completed || CurrentImport.Status == ImportStatus.Failed)
                    {
                        <div class="mt-3">
                            <button class="btn btn-secondary" @onclick="ResetImport">
                                <i class="bi bi-arrow-clockwise"></i> Import Another File
                            </button>
                        </div>
                    }
                </div>
            }
        </div>
    </div>

    <div class="card mt-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5>Import History</h5>
            <button class="btn btn-sm btn-outline-primary" @onclick="LoadImportHistory" disabled="@IsLoadingHistory">
                @if (IsLoadingHistory)
                {
                    <span class="spinner-border spinner-border-sm me-1"></span>
                }
                <i class="bi bi-arrow-clockwise"></i> Refresh
            </button>
        </div>
        <div class="card-body">
            @if (IsLoadingHistory)
            {
                <LoadingSpinner LoadingText="Loading import history..." />
            }
            else if (ImportHistory?.Any() == true)
            {
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>File Name</th>
                                <th>Status</th>
                                <th>Records</th>
                                <th>Changes</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var import in ImportHistory)
                            {
                                <tr>
                                    <td>@import.ImportDate.ToString("MMM dd, yyyy HH:mm")</td>
                                    <td>@import.FileName</td>
                                    <td>
                                        <span class="badge bg-@GetStatusColor(import.Status)">
                                            @import.Status
                                        </span>
                                    </td>
                                    <td>@import.RecordsProcessed.ToString("N0")</td>
                                    <td>@import.RecordsChanged.ToString("N0")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-muted text-center">
                    <i class="bi bi-inbox me-2"></i>
                    No import history available.
                </div>
            }
        </div>
    </div>
    </div>
</AuthenticationGuard>

@code {
    private IBrowserFile? SelectedFile;
    private bool IsUploading = false;
    private bool IsLoadingHistory = false;
    private string? ErrorMessage;
    private ImportSessionDto? CurrentImport;
    private List<ImportSessionDto>? ImportHistory;

    protected override async Task OnInitializedAsync()
    {
        await LoadImportHistory();
    }

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        SelectedFile = e.File;
        ErrorMessage = null;
    }

    private async Task StartImport()
    {
        if (SelectedFile == null) return;

        // Validate file
        if (!SelectedFile.Name.EndsWith(".json", StringComparison.OrdinalIgnoreCase))
        {
            ErrorMessage = "Only JSON files are allowed.";
            return;
        }

        if (SelectedFile.Size > 100 * 1024 * 1024) // 100MB
        {
            ErrorMessage = "File size exceeds 100MB limit.";
            return;
        }

        IsUploading = true;
        ErrorMessage = null;
        try
        {
            CurrentImport = await ImportService.StartImportAsync(SelectedFile);

            // Start polling for updates
            _ = Task.Run(async () => await PollImportStatus(CurrentImport.Id));
        }
        catch (Exception)
        {
            ErrorMessage = "Failed to start import. Please try again.";
            CurrentImport = null;
        }
        finally
        {
            IsUploading = false;
        }
    }

    private async Task PollImportStatus(Guid sessionId)
    {
        while (CurrentImport?.Status == ImportStatus.Processing)
        {
            await Task.Delay(2000);
            try
            {
                CurrentImport = await ImportService.GetImportStatusAsync(sessionId);
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception)
            {
                // If polling fails, stop polling
                break;
            }
        }

        // Refresh import history when import completes
        await LoadImportHistory();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadImportHistory()
    {
        IsLoadingHistory = true;
        try
        {
            ImportHistory = await ImportService.GetImportHistoryAsync();
        }
        catch (Exception)
        {
            ErrorMessage = "Failed to load import history.";
        }
        finally
        {
            IsLoadingHistory = false;
        }
    }

    private void ResetImport()
    {
        CurrentImport = null;
        SelectedFile = null;
        ErrorMessage = null;
    }

    private string GetStatusColor(ImportStatus status)
    {
        return status switch
        {
            ImportStatus.Completed => "success",
            ImportStatus.Processing => "primary",
            ImportStatus.Failed => "danger",
            ImportStatus.Cancelled => "warning",
            _ => "secondary"
        };
    }

    private void ClearError()
    {
        ErrorMessage = null;
    }
}
