@page "/history"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using DOAMapper.Shared.Services
@using DOAMapper.Client.Components
@inject DateStateService DateState
@inject IImportService ImportService

<PageTitle>History & Analytics - DOAMapper</PageTitle>

<AuthenticationGuard RequireAdmin="true">

<div class="history-analytics">
    <div class="history-header">
        <h2>History & Analytics</h2>
        <p class="text-muted">Track data changes and import history over time</p>
    </div>

    <ErrorAlert ErrorMessage="@ErrorMessage" OnErrorCleared="ClearError" />

    <div class="row">
        <!-- Import Timeline -->
        <div class="col-lg-8 mb-4">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5><i class="bi bi-clock-history me-2"></i>Import Timeline</h5>
                    <button class="btn btn-sm btn-outline-primary" @onclick="LoadImportHistory" disabled="@IsLoading">
                        @if (IsLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-1"></span>
                        }
                        <i class="bi bi-arrow-clockwise"></i> Refresh
                    </button>
                </div>
                <div class="card-body">
                    @if (IsLoading)
                    {
                        <LoadingSpinner LoadingText="Loading import history..." />
                    }
                    else if (ImportHistory?.Any() == true)
                    {
                        <div class="timeline">
                            @foreach (var import in ImportHistory.Take(10))
                            {
                                <div class="timeline-item">
                                    <div class="timeline-date">
                                        @import.ImportDate.ToString("MMM dd, yyyy HH:mm")
                                    </div>
                                    <div class="timeline-content">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <div>
                                                <h6>@import.FileName</h6>
                                                <p class="mb-1">
                                                    <strong>@import.RecordsProcessed.ToString("N0")</strong> records processed,
                                                    <strong>@import.RecordsChanged.ToString("N0")</strong> changes detected
                                                </p>
                                                @if (!string.IsNullOrEmpty(import.ErrorMessage))
                                                {
                                                    <small class="text-danger">@import.ErrorMessage</small>
                                                }
                                            </div>
                                            <span class="badge bg-@GetStatusColor(import.Status)">
                                                @import.Status
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            }
                            @if (ImportHistory.Count > 10)
                            {
                                <div class="text-center mt-3">
                                    <small class="text-muted">... and @(ImportHistory.Count - 10) more imports</small>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center text-muted">
                            <i class="bi bi-inbox display-4"></i>
                            <p class="mt-2">No import history available</p>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Quick Stats -->
        <div class="col-lg-4 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="bi bi-bar-chart-fill me-2"></i>Quick Stats</h5>
                </div>
                <div class="card-body">
                    @if (ImportHistory?.Any() == true)
                    {
                        <div class="stat-item">
                            <label>Total Imports:</label>
                            <span>@ImportHistory.Count</span>
                        </div>
                        <div class="stat-item">
                            <label>Successful:</label>
                            <span class="text-success">@ImportHistory.Count(i => i.Status == ImportStatus.Completed)</span>
                        </div>
                        <div class="stat-item">
                            <label>Failed:</label>
                            <span class="text-danger">@ImportHistory.Count(i => i.Status == ImportStatus.Failed)</span>
                        </div>
                        <div class="stat-item">
                            <label>Total Records:</label>
                            <span>@ImportHistory.Where(i => i.Status == ImportStatus.Completed).Sum(i => i.RecordsProcessed).ToString("N0")</span>
                        </div>
                        <div class="stat-item">
                            <label>Total Changes:</label>
                            <span>@ImportHistory.Where(i => i.Status == ImportStatus.Completed).Sum(i => i.RecordsChanged).ToString("N0")</span>
                        </div>
                        <div class="stat-item">
                            <label>Latest Import:</label>
                            <span>@ImportHistory.First().ImportDate.ToString("MMM dd, yyyy")</span>
                        </div>
                    }
                    else
                    {
                        <div class="text-muted text-center">
                            <i class="bi bi-info-circle me-2"></i>
                            No statistics available
                        </div>
                    }
                </div>
            </div>

            <!-- Available Dates -->
            <div class="card mt-3">
                <div class="card-header">
                    <h5><i class="bi bi-calendar-fill me-2"></i>Available Dates</h5>
                </div>
                <div class="card-body">
                    @if (DateState.AvailableDates.Any())
                    {
                        <div class="date-list">
                            @foreach (var date in DateState.AvailableDates.Take(8))
                            {
                                <div class="date-item">
                                    <span class="date-value">@date.ToString("MMM dd, yyyy")</span>
                                </div>
                            }
                            @if (DateState.AvailableDates.Count > 8)
                            {
                                <div class="text-muted text-center mt-2">
                                    ... and @(DateState.AvailableDates.Count - 8) more
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-muted text-center">
                            <i class="bi bi-calendar-x me-2"></i>
                            No dates available
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Getting Started Guide -->
    @if (!ImportHistory?.Any() == true)
    {
        <div class="row">
            <div class="col-12">
                <div class="card border-info">
                    <div class="card-header bg-info text-white">
                        <h5><i class="bi bi-lightbulb-fill me-2"></i>About DOAMapper</h5>
                    </div>
                    <div class="card-body">
                        <h6>Dragons of Atlantis Map Tracker</h6>
                        <p>DOAMapper helps you track and analyze Dragons of Atlantis game data over time. Here's what you can do:</p>
                        <div class="row">
                            <div class="col-md-6">
                                <h6><i class="bi bi-people-fill me-2"></i>Player Tracking</h6>
                                <ul>
                                    <li>Search for players by name or ID</li>
                                    <li>View player statistics and might</li>
                                    <li>Track player alliance changes</li>
                                    <li>Monitor tile ownership</li>
                                </ul>
                            </div>
                            <div class="col-md-6">
                                <h6><i class="bi bi-shield-fill me-2"></i>Alliance Analysis</h6>
                                <ul>
                                    <li>Browse all alliances by power</li>
                                    <li>View alliance member lists</li>
                                    <li>Track alliance growth and changes</li>
                                    <li>Monitor fortress locations</li>
                                </ul>
                            </div>
                        </div>
                        <div class="mt-3">
                            <h6><i class="bi bi-upload me-2"></i>Data Import</h6>
                            <p>Upload JSON files containing map data to start tracking. The system automatically detects changes and maintains historical records.</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>
</AuthenticationGuard>

@code {
    private bool IsLoading = true;
    private string? ErrorMessage;
    private List<ImportSessionDto>? ImportHistory;

    protected override async Task OnInitializedAsync()
    {
        await LoadImportHistory();
    }

    private async Task LoadImportHistory()
    {
        IsLoading = true;
        ErrorMessage = null;

        try
        {
            ImportHistory = await ImportService.GetImportHistoryAsync();
            ImportHistory = ImportHistory.OrderByDescending(i => i.ImportDate).ToList();
        }
        catch (Exception)
        {
            ErrorMessage = "Failed to load import history. Please try again.";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private string GetStatusColor(ImportStatus status)
    {
        return status switch
        {
            ImportStatus.Completed => "success",
            ImportStatus.Processing => "primary",
            ImportStatus.Failed => "danger",
            ImportStatus.Cancelled => "warning",
            _ => "secondary"
        };
    }

    private void ClearError()
    {
        ErrorMessage = null;
    }
}
