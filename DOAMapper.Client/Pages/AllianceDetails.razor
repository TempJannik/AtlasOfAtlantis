@page "/alliances/{RealmId}/{AllianceId}"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using DOAMapper.Shared.Services
@using DOAMapper.Shared.Models.DTOs
@using DOAMapper.Client.Services
@using Microsoft.AspNetCore.Components
@inject IAllianceService AllianceService
@inject IRealmService RealmService
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@inject DateStateService DateState
@inject RealmStateService RealmState
@implements IDisposable

<PageTitle>@(Alliance?.Name ?? "Alliance Details") - AoA</PageTitle>

<div class="dragon-container">
    @if (Alliance != null)
    {
        <div class="dragon-content">
            <div class="dragon-detail-header">
                <div class="dragon-detail-title">
                    <h2 class="dragon-item-name">🛡️ @Alliance.Name</h2>
                    <p class="dragon-text-secondary">👑 Led by @Alliance.OverlordName</p>
                </div>
                <div class="dragon-detail-actions">
                    <DateSelector AvailableDates="AvailableDates" />
                    <button @onclick="NavigateBackToAlliances" class="dragon-btn">← Back to Alliances</button>
                </div>
            </div>

            <ErrorAlert ErrorMessage="@ErrorMessage" OnErrorCleared="ClearError" />

            <div class="dragon-detail-grid">
                <MudCard Class="dragon-mud-card dragon-stats-card" Elevation="3">
                    <MudCardHeader Class="dragon-card-header">
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6" Class="dragon-card-title">
                                <MudIcon Icon="@Icons.Material.Filled.Shield" Class="me-2" />
                                Alliance Stats
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent Class="dragon-card-content">
                        <div class="dragon-stats-list">
                            <div class="dragon-stat-item">
                                <MudText Typo="Typo.body2" Class="dragon-stat-label">
                                    <MudIcon Icon="@Icons.Material.Filled.Badge" Size="Size.Small" Class="me-1" />
                                    Alliance ID:
                                </MudText>
                                <MudChip T="string" Color="Color.Info" Size="Size.Small" Class="dragon-stat-chip">
                                    @Alliance.AllianceId
                                </MudChip>
                            </div>
                            <div class="dragon-stat-item">
                                <MudText Typo="Typo.body2" Class="dragon-stat-label">
                                    <MudIcon Icon="@Icons.Material.Filled.FlashOn" Size="Size.Small" Class="me-1" />
                                    Power:
                                </MudText>
                                <MudChip T="string" Color="Color.Primary" Size="Size.Medium" Class="dragon-power-chip">
                                    @Alliance.Power.ToString("N0")
                                </MudChip>
                            </div>
                            <div class="dragon-stat-item">
                                <MudText Typo="Typo.body2" Class="dragon-stat-label">
                                    <MudIcon Icon="@Icons.Material.Filled.People" Size="Size.Small" Class="me-1" />
                                    Members:
                                </MudText>
                                <MudChip T="string" Color="Color.Secondary" Size="Size.Small" Class="dragon-member-chip">
                                    @Alliance.MemberCount
                                </MudChip>
                            </div>
                            <div class="dragon-stat-item">
                                <MudText Typo="Typo.body2" Class="dragon-stat-label">
                                    <MudIcon Icon="@Icons.Material.Filled.Castle" Size="Size.Small" Class="me-1" />
                                    Fortress:
                                </MudText>
                                <MudChip T="string" Color="Color.Tertiary" Size="Size.Small" Class="dragon-fortress-chip">
                                    Level @Alliance.FortressLevel
                                </MudChip>
                            </div>
                            <div class="dragon-stat-item">
                                <MudText Typo="Typo.body2" Class="dragon-stat-label">
                                    <MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small" Class="me-1" />
                                    Location:
                                </MudText>
                                <MudChip T="string" Color="Color.Dark" Size="Size.Small" Class="dragon-location-chip">
                                    (@Alliance.FortressX, @Alliance.FortressY)
                                </MudChip>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>

                <MudCard Class="dragon-mud-card dragon-members-card" Elevation="3">
                    <MudCardHeader Class="dragon-card-header">
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6" Class="dragon-card-title">
                                <MudIcon Icon="@Icons.Material.Filled.People" Class="me-2" />
                                Members: @(AllianceMembers?.TotalCount ?? 0)
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent Class="dragon-card-content">
                        @if (IsLoadingMembers)
                        {
                            <div class="d-flex justify-center align-center pa-4">
                                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                                <MudText Typo="Typo.body2" Class="ml-3">Loading members...</MudText>
                            </div>
                        }
                        else if (AllianceMembers?.Items?.Any() == true)
                        {
                            <div class="dragon-member-list">
                                @foreach (var member in AllianceMembers.Items)
                                {
                                    <MudPaper Class="dragon-member-item pa-3 mb-2"
                                              Elevation="1"
                                              @onclick="() => NavigateToPlayer(member.PlayerId)"
                                              Style="cursor: pointer; transition: all 0.2s ease;">
                                        <div class="d-flex justify-space-between align-center">
                                            <MudText Typo="Typo.body1" Class="dragon-member-name">
                                                <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small" Class="me-2" />
                                                @member.Name
                                            </MudText>
                                            <MudChip T="string" Color="Color.Primary" Size="Size.Small" Class="dragon-member-power">
                                                @member.Might.ToString("N0")
                                            </MudChip>
                                        </div>
                                    </MudPaper>
                                }
                            </div>

                            @if (AllianceMembers.TotalPages > 1)
                            {
                                <div class="dragon-pagination-container mt-3">
                                    <MudPagination Count="AllianceMembers.TotalPages"
                                                   Selected="CurrentMemberPage"
                                                   SelectedChanged="OnMemberPageChanged"
                                                   ShowFirstButton="true"
                                                   ShowLastButton="true"
                                                   ShowPreviousButton="true"
                                                   ShowNextButton="true"
                                                   BoundaryCount="1"
                                                   MiddleCount="3"
                                                   Class="dragon-mud-pagination"
                                                   Color="Color.Primary" />
                                </div>
                            }
                        }
                        else
                        {
                            <MudAlert Severity="Severity.Info" Class="dragon-no-members-alert">
                                <MudIcon Icon="@Icons.Material.Filled.Block" Class="me-2" />
                                No members found for this alliance.
                            </MudAlert>
                        }
                    </MudCardContent>
                </MudCard>
            </div>

            @if (AllianceHistory?.Any() == true)
            {
                <MudCard Class="dragon-mud-card dragon-history-card" Elevation="3">
                    <MudCardHeader Class="dragon-card-header">
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6" Class="dragon-card-title">
                                <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Class="me-2" />
                                Alliance History
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent Class="dragon-card-content">
                        <MudTimeline TimelineOrientation="TimelineOrientation.Vertical"
                                     TimelinePosition="TimelinePosition.Start"
                                     Class="dragon-history-timeline">
                            @foreach (var entry in AllianceHistory.OrderByDescending(h => h.ValidFrom))
                            {
                                <MudTimelineItem Color="Color.Primary" Size="Size.Small" Class="dragon-timeline-item">
                                    <ItemContent>
                                        <MudPaper Class="pa-3 mb-2" Elevation="1">
                                            <MudText Typo="Typo.caption" Class="dragon-timeline-date mb-2">
                                                <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Size="Size.Small" Class="me-1" />
                                                @entry.ValidFrom.ToString("MMM dd, yyyy")
                                            </MudText>
                                            @{
                                                var changeDescription = GetAllianceChangeDescription(entry, AllianceHistory);
                                            }
                                            @if (!string.IsNullOrEmpty(changeDescription))
                                            {
                                                <MudChip T="string"
                                                         Color="@GetChangeTypeColor(entry.ChangeType)"
                                                         Size="Size.Small"
                                                         Class="mb-2">
                                                    @changeDescription
                                                </MudChip>
                                            }
                                            <div class="dragon-alliance-data">
                                                <MudText Typo="Typo.body2" Class="mb-1">
                                                    <MudIcon Icon="@Icons.Material.Filled.Shield" Size="Size.Small" Class="me-1" />
                                                    <strong>@entry.Data.Name</strong>
                                                </MudText>
                                                <MudText Typo="Typo.caption" Class="dragon-text-muted">
                                                    <MudIcon Icon="@Icons.Material.Filled.FlashOn" Size="Size.Small" Class="me-1" />
                                                    Power: @entry.Data.Power.ToString("N0") |
                                                    <MudIcon Icon="@Icons.Material.Filled.People" Size="Size.Small" Class="mx-1" />
                                                    Members: @entry.Data.MemberCount |
                                                    <MudIcon Icon="@Icons.Material.Filled.Castle" Size="Size.Small" Class="mx-1" />
                                                    Fortress: Level @entry.Data.FortressLevel
                                                </MudText>
                                            </div>
                                        </MudPaper>
                                    </ItemContent>
                                </MudTimelineItem>
                            }
                        </MudTimeline>
                    </MudCardContent>
                </MudCard>
            }
        </div>
    }
    else if (IsLoading)
    {
        <LoadingSpinner LoadingText="Loading alliance details..." />
    }
    else
    {
        <div class="dragon-error">
            ⚠️ Alliance not found for the selected date.
        </div>
    }
</div>

@code {
    [Parameter] public string RealmId { get; set; } = string.Empty;
    [Parameter] public string AllianceId { get; set; } = string.Empty;
    [SupplyParameterFromQuery] public string? Date { get; set; }

    private bool IsLoading = true;
    private bool IsLoadingMembers = false;
    private string? ErrorMessage;
    private AllianceDto? Alliance;
    private PagedResult<PlayerDto>? AllianceMembers;
    private List<HistoryEntryDto<AllianceDto>>? AllianceHistory;
    private List<DateTime> AvailableDates = new();
    
    private int CurrentMemberPage = 1;
    private const int MemberPageSize = 6;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Subscribe to date changes
            DateState.DateChanged += OnDateStateChanged;
            
            // Parse date parameter if provided
            if (!string.IsNullOrEmpty(Date) && DateTime.TryParse(Date, out var parsedDate))
            {
                DateState.SetSelectedDate(parsedDate);
            }

            await LoadAllianceData();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to initialize alliance details: {ex.Message}";
            IsLoading = false;
        }
    }

    private async Task LoadAllianceData()
    {
        try
        {
            IsLoading = true;
            ErrorMessage = string.Empty;

            if (!string.IsNullOrEmpty(RealmId))
            {
                var loadedAlliance = await AllianceService.GetAllianceAsync(AllianceId, RealmId, DateState.SelectedDate.Value);
                Alliance = loadedAlliance;
                await LoadMembers();

                // Always load history
                if (AllianceHistory == null)
                {
                    AllianceHistory = await AllianceService.GetAllianceHistoryAsync(AllianceId, RealmId);
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to load alliance data: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task LoadMembers()
    {
        try
        {
            IsLoadingMembers = true;
            if (!string.IsNullOrEmpty(RealmId))
            {
                AllianceMembers = await AllianceService.GetAllianceMembersAsync(AllianceId, RealmId, DateState.SelectedDate.Value, CurrentMemberPage, MemberPageSize);
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to load alliance members: {ex.Message}";
        }
        finally
        {
            IsLoadingMembers = false;
        }
    }

    private async Task LoadMemberPage(int page)
    {
        CurrentMemberPage = page;
        await LoadMembers();
    }

    private async Task OnMemberPageChanged(int page)
    {
        CurrentMemberPage = page;
        await LoadMembers();
        StateHasChanged();
    }

    private void NavigateToPlayer(string playerId)
    {
        Navigation.NavigateTo($"/players/{RealmId}/{playerId}?date={DateState.SelectedDate:yyyy-MM-dd}");
    }

    private async void OnDateStateChanged(DateTime? newDate)
    {
        await InvokeAsync(async () =>
        {
            await LoadAllianceData();
            StateHasChanged();
        });
    }

    private void ClearError()
    {
        ErrorMessage = string.Empty;
    }

    private string GetChangeTypeCssClass(string changeType)
    {
        return changeType.ToLower() switch
        {
            "added" => "positive",
            "modified" => "neutral",
            "removed" => "negative",
            _ => "neutral"
        };
    }

    private Color GetChangeTypeColor(string changeType)
    {
        return changeType.ToLower() switch
        {
            "added" => Color.Success,
            "modified" => Color.Info,
            "removed" => Color.Error,
            _ => Color.Default
        };
    }

    private string GetAllianceChangeDescription(HistoryEntryDto<AllianceDto> entry, List<HistoryEntryDto<AllianceDto>> allHistory)
    {
        var changeType = entry.ChangeType.ToLower();

        if (changeType == "added")
        {
            return "Alliance established";
        }
        else if (changeType == "removed")
        {
            return "Alliance disbanded";
        }
        else if (changeType == "modified")
        {
            // Find the previous entry to compare changes
            var previousEntry = allHistory
                .Where(h => h.ValidFrom < entry.ValidFrom)
                .OrderByDescending(h => h.ValidFrom)
                .FirstOrDefault();

            if (previousEntry != null)
            {
                var changes = new List<string>();

                if (entry.Data.Name != previousEntry.Data.Name)
                    changes.Add("name change");
                if (entry.Data.Power != previousEntry.Data.Power)
                    changes.Add("power change");
                if (entry.Data.MemberCount != previousEntry.Data.MemberCount)
                    changes.Add("member change");
                if (entry.Data.FortressLevel != previousEntry.Data.FortressLevel)
                    changes.Add("fortress level change");
                if (entry.Data.OverlordName != previousEntry.Data.OverlordName)
                    changes.Add("leadership change");

                return changes.Any() ? string.Join(", ", changes) : "Alliance updated";
            }

            return "Alliance updated";
        }

        return string.Empty;
    }

    private void NavigateBackToAlliances()
    {
        Console.WriteLine($"NavigateBackToAlliances called - RealmId: {RealmId}");

        // Ensure realm state is properly set before navigating
        if (!string.IsNullOrEmpty(RealmId))
        {
            var realm = RealmState.AvailableRealms.FirstOrDefault(r => r.RealmId == RealmId);
            if (realm != null)
            {
                Console.WriteLine($"Setting realm to: {realm.Name} ({realm.RealmId})");
                RealmState.SetSelectedRealm(realm);
            }
            else
            {
                Console.WriteLine($"Realm not found for RealmId: {RealmId}");
            }
        }

        Console.WriteLine("Navigating to /alliances (SPA navigation)");
        Navigation.NavigateTo("/alliances");
    }

    public void Dispose()
    {
        DateState.DateChanged -= OnDateStateChanged;
    }
}

<style>
    /* Dragon theme styling for MudCard components in Alliance Details */
    .dragon-mud-card {
        background: var(--dragon-bg-surface);
        border: 1px solid var(--dragon-border-primary);
        border-radius: var(--dragon-radius-lg);
        backdrop-filter: blur(10px);
        margin-bottom: var(--dragon-space-6);
        overflow: hidden;
        position: relative;
    }

    .dragon-mud-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: radial-gradient(circle at 10% 20%, rgba(139, 69, 19, 0.05) 0%, transparent 50%);
        pointer-events: none;
        z-index: 0;
    }

    .dragon-card-header {
        background: var(--dragon-bg-surface-hover);
        border-bottom: 1px solid var(--dragon-border-primary);
        position: relative;
        z-index: 1;
    }

    .dragon-card-title {
        color: var(--dragon-text-primary);
        font-family: var(--dragon-font-heading);
        font-weight: var(--dragon-font-semibold);
        display: flex;
        align-items: center;
    }

    .dragon-card-content {
        position: relative;
        z-index: 1;
        padding: var(--dragon-space-5);
    }

    .dragon-stats-list {
        display: flex;
        flex-direction: column;
        gap: var(--dragon-space-4);
    }

    .dragon-stat-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: var(--dragon-space-3);
        background: var(--dragon-bg-surface-hover);
        border-radius: var(--dragon-radius-md);
        border: 1px solid rgba(139, 69, 19, 0.1);
    }

    .dragon-stat-label {
        color: var(--dragon-text-secondary);
        font-family: var(--dragon-font-primary);
        font-weight: var(--dragon-font-medium);
        display: flex;
        align-items: center;
    }

    .dragon-member-list {
        max-height: 400px;
        overflow-y: auto;
        padding-right: var(--dragon-space-2);
    }

    .dragon-member-item {
        background: var(--dragon-bg-surface-hover);
        border: 1px solid rgba(139, 69, 19, 0.1);
        transition: var(--dragon-transition-base);
    }

    .dragon-member-item:hover {
        background: var(--dragon-bg-surface);
        border-color: var(--dragon-border-hover);
        transform: translateY(-1px);
        box-shadow: var(--dragon-shadow-sm);
    }

    .dragon-member-name {
        color: var(--dragon-text-primary);
        font-weight: var(--dragon-font-medium);
    }

    .dragon-member-power {
        background: linear-gradient(135deg, var(--dragon-primary), var(--dragon-primary-light));
        color: #ffffff;
        font-weight: var(--dragon-font-medium);
    }

    .dragon-no-members-alert {
        background: var(--dragon-bg-surface-hover);
        border: 1px solid var(--dragon-border-primary);
        color: var(--dragon-text-secondary);
    }

    .dragon-history-timeline {
        max-height: 500px;
        overflow-y: auto;
        padding-right: var(--dragon-space-2);
    }

    .dragon-timeline-date {
        color: var(--dragon-text-secondary);
        font-family: var(--dragon-font-primary);
        font-weight: var(--dragon-font-medium);
    }

    .dragon-alliance-data {
        margin-top: var(--dragon-space-2);
    }

    /* Mobile responsive design handled by MudBlazor */

    /* Dragon theme styling for MudPagination in Alliance Details */
    .dragon-pagination-container {
        display: flex;
        justify-content: center;
        align-items: center;
        margin: var(--dragon-space-4) 0;
        padding: var(--dragon-space-3);
        background: var(--dragon-bg-surface-hover);
        border-radius: var(--dragon-radius-md);
        border: 1px solid rgba(139, 69, 19, 0.1);
    }

    .dragon-mud-pagination {
        background: transparent;
    }

    .dragon-mud-pagination .mud-pagination-item {
        background: transparent;
        border: 1px solid var(--dragon-border-primary);
        border-radius: var(--dragon-radius-md);
        color: var(--dragon-text-secondary);
        font-family: var(--dragon-font-primary);
        font-weight: var(--dragon-font-medium);
        margin: 0 var(--dragon-space-1);
        transition: var(--dragon-transition-base);
        min-width: 36px;
        height: 36px;
        font-size: 0.9rem;
    }

    .dragon-mud-pagination .mud-pagination-item:hover {
        background: var(--dragon-bg-surface-hover);
        border-color: var(--dragon-border-hover);
        color: var(--dragon-text-primary);
        transform: translateY(-1px);
        box-shadow: var(--dragon-shadow-sm);
    }

    .dragon-mud-pagination .mud-pagination-item.mud-pagination-item-selected {
        background: linear-gradient(135deg, var(--dragon-primary), var(--dragon-primary-light));
        border-color: var(--dragon-primary);
        color: #ffffff;
        box-shadow: var(--dragon-shadow-md);
    }

    .dragon-mud-pagination .mud-pagination-item.mud-pagination-item-selected:hover {
        background: linear-gradient(135deg, var(--dragon-primary-dark), var(--dragon-primary));
        transform: translateY(-1px);
        box-shadow: var(--dragon-shadow-lg);
    }
</style>
