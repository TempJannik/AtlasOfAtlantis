@page "/alliances/{AllianceId}"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using DOAMapper.Shared.Services
@inject IAllianceService AllianceService
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation

<PageTitle>@(Alliance?.Name ?? "Alliance Details") - AoA</PageTitle>

<div class="dragon-container">
    <div class="dragon-header">
        <div class="dragon-logo">🐉</div>
        <h1 class="dragon-title">Alliance Details</h1>
        <p class="dragon-subtitle">Explore Alliance Information</p>
    </div>

    @if (Alliance != null)
    {
        <div class="dragon-content">
            <div class="dragon-detail-header">
                <div class="dragon-detail-title">
                    <h2 class="dragon-item-name">🛡️ @Alliance.Name</h2>
                    <p class="dragon-text-secondary">👑 Led by @Alliance.OverlordName</p>
                </div>
                <div class="dragon-detail-actions">
                    <DateSelector @bind-SelectedDate="CurrentDate" AvailableDates="AvailableDates" />
                    <button class="dragon-btn dragon-btn-primary" @onclick="ShowHistory">
                        🕒 View History
                    </button>
                    <a href="/alliances" class="dragon-btn">← Back to Alliances</a>
                </div>
            </div>

            <ErrorAlert ErrorMessage="@ErrorMessage" OnErrorCleared="ClearError" />

            <div class="dragon-detail-grid">
                <div class="dragon-stats-card">
                    <h3 class="dragon-card-title">🛡️ Alliance Stats</h3>
                    <div class="dragon-stats-list">
                        <div class="dragon-stat-item">
                            <span class="dragon-stat-label">🆔 Alliance ID:</span>
                            <span class="dragon-stat-value">@Alliance.AllianceId</span>
                        </div>
                        <div class="dragon-stat-item">
                            <span class="dragon-stat-label">⚡ Power:</span>
                            <span class="dragon-stat-value dragon-power-value">@Alliance.Power.ToString("N0")</span>
                        </div>
                        <div class="dragon-stat-item">
                            <span class="dragon-stat-label">👥 Members:</span>
                            <span class="dragon-stat-value">@Alliance.MemberCount</span>
                        </div>
                        <div class="dragon-stat-item">
                            <span class="dragon-stat-label">🏰 Fortress:</span>
                            <span class="dragon-stat-value">Level @Alliance.FortressLevel</span>
                        </div>
                        <div class="dragon-stat-item">
                            <span class="dragon-stat-label">📍 Location:</span>
                            <span class="dragon-stat-value">(@Alliance.FortressX, @Alliance.FortressY)</span>
                        </div>
                    </div>
                </div>

                <div class="dragon-members-card">
                    <div class="dragon-members-header">
                        <h3 class="dragon-card-title">👥 Members: @(AllianceMembers?.TotalCount ?? 0)</h3>
                        <button class="dragon-btn dragon-btn-primary" @onclick="LoadMembers" disabled="@IsLoadingMembers">
                            @if (IsLoadingMembers)
                            {
                                <span class="dragon-spinner-sm"></span>
                            }
                            🔄 Refresh
                        </button>
                    </div>
                    <div class="dragon-members-content">
                        @if (IsLoadingMembers)
                        {
                            <LoadingSpinner LoadingText="Loading members..." />
                        }
                        else if (AllianceMembers?.Items?.Any() == true)
                        {
                            <div class="dragon-member-list">
                                @foreach (var member in AllianceMembers.Items)
                                {
                                    <div class="dragon-list-item dragon-member-item" @onclick="() => NavigateToPlayer(member.PlayerId)">
                                        <div class="dragon-item-header">
                                            <div class="dragon-member-info">
                                                <span class="dragon-item-name">⚔️ @member.Name</span>
                                                <small class="dragon-text-secondary">🏰 @member.CityName</small>
                                            </div>
                                            <div class="dragon-item-badge">
                                                @member.Might.ToString("N0")
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>

                            <Pagination CurrentPage="CurrentMemberPage" TotalPages="AllianceMembers.TotalPages"
                                       OnPageChanged="OnMemberPageChanged" />
                        }
                        else
                        {
                            <p class="dragon-text-muted">🚫 No members found for this alliance.</p>
                        }
                    </div>
                </div>
            </div>

            @if (ShowAllianceHistory && AllianceHistory?.Any() == true)
            {
                <div class="dragon-history-card">
                    <h3 class="dragon-card-title">📈 Alliance History</h3>
                    <div class="dragon-history-content">
                        <div class="dragon-history-timeline">
                            @foreach (var entry in AllianceHistory.OrderByDescending(h => h.ValidFrom))
                            {
                                <div class="dragon-timeline-item">
                                    <div class="dragon-timeline-date">
                                        📅 @entry.ValidFrom.ToString("MMM dd, yyyy")
                                    </div>
                                    <div class="dragon-timeline-content">
                                        <div class="dragon-change-badge dragon-change-@entry.ChangeType.ToLower()">
                                            @entry.ChangeType
                                        </div>
                                        <div class="dragon-alliance-data">
                                            <strong>🛡️ @entry.Data.Name</strong>
                                            <br />
                                        <small class="dragon-text-muted">
                                            ⚡ Power: @entry.Data.Power.ToString("N0") |
                                            👥 Members: @entry.Data.MemberCount |
                                            🏰 Fortress: Level @entry.Data.FortressLevel
                                        </small>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
            }
        </div>
    }
    else if (IsLoading)
    {
        <LoadingSpinner LoadingText="Loading alliance details..." />
    }
    else
    {
        <div class="dragon-error">
            ⚠️ Alliance not found for the selected date.
        </div>
    }
</div>

@code {
    [Parameter] public string AllianceId { get; set; } = string.Empty;
    [SupplyParameterFromQuery] public string? Date { get; set; }

    private DateTime? CurrentDate;
    private bool IsLoading = true;
    private bool IsLoadingMembers = false;
    private bool ShowAllianceHistory = false;
    private string? ErrorMessage;

    private int CurrentMemberPage = 1;
    private const int MemberPageSize = 6;

    private AllianceDto? Alliance;
    private PagedResult<PlayerDto>? AllianceMembers;
    private List<HistoryEntryDto<AllianceDto>>? AllianceHistory;
    private List<DateTime> AvailableDates = new();

    protected override async Task OnInitializedAsync()
    {
        // Check authentication first
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (!isAuthenticated)
        {
            Navigation.NavigateTo("/login", true);
            return;
        }

        try
        {
            AvailableDates = await AllianceService.GetAvailableDatesAsync();

            if (!string.IsNullOrEmpty(Date) && DateTime.TryParse(Date, out var parsedDate))
            {
                CurrentDate = parsedDate;
            }
            else if (AvailableDates.Any())
            {
                CurrentDate = AvailableDates.First();
            }

            await LoadAllianceData();
        }
        catch (Exception)
        {
            ErrorMessage = "Failed to initialize alliance details. Please try again.";
            IsLoading = false;
        }
    }

    private async Task LoadAllianceData()
    {
        if (!CurrentDate.HasValue) return;

        IsLoading = true;
        ErrorMessage = null;
        try
        {
            Alliance = await AllianceService.GetAllianceAsync(AllianceId, CurrentDate.Value);
            await LoadMembers();
        }
        catch (Exception)
        {
            ErrorMessage = "Failed to load alliance data. Please try again.";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task LoadMembers()
    {
        if (!CurrentDate.HasValue) return;

        IsLoadingMembers = true;
        try
        {
            AllianceMembers = await AllianceService.GetAllianceMembersAsync(AllianceId, CurrentDate.Value, CurrentMemberPage, MemberPageSize);
        }
        catch (Exception)
        {
            ErrorMessage = "Failed to load alliance members. Please try again.";
        }
        finally
        {
            IsLoadingMembers = false;
        }
    }

    private async Task ShowHistory()
    {
        if (AllianceHistory == null)
        {
            try
            {
                AllianceHistory = await AllianceService.GetAllianceHistoryAsync(AllianceId);
            }
            catch (Exception)
            {
                ErrorMessage = "Failed to load alliance history. Please try again.";
                return;
            }
        }
        ShowAllianceHistory = !ShowAllianceHistory;
    }

    private async Task OnMemberPageChanged(int page)
    {
        CurrentMemberPage = page;
        await LoadMembers();
    }

    private void NavigateToPlayer(string playerId)
    {
        Navigation.NavigateTo($"/players/{playerId}?date={CurrentDate:yyyy-MM-dd}");
    }

    private string GetChangeTypeBadgeColor(string changeType)
    {
        return changeType.ToLower() switch
        {
            "added" => "success",
            "modified" => "warning",
            "removed" => "danger",
            _ => "secondary"
        };
    }

    private void ClearError()
    {
        ErrorMessage = null;
    }
}
