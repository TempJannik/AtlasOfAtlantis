@page "/alliances/{RealmId}/{AllianceId}"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using DOAMapper.Shared.Services
@using DOAMapper.Shared.Models.DTOs
@using DOAMapper.Client.Services
@using Microsoft.AspNetCore.Components
@inject IAllianceService AllianceService
@inject IRealmService RealmService
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@inject DateStateService DateState
@inject RealmStateService RealmState
@implements IDisposable

<PageTitle>@(Alliance?.Name ?? "Alliance Details") - AoA</PageTitle>

<div class="dragon-container">
    @if (Alliance != null)
    {
        <div class="dragon-content">
            <div class="dragon-detail-header">
                <div class="dragon-detail-title">
                    <h2 class="dragon-item-name">🛡️ @Alliance.Name</h2>
                    <p class="dragon-text-secondary">👑 Led by @Alliance.OverlordName</p>
                </div>
                <div class="dragon-detail-actions">
                    <DateSelector AvailableDates="AvailableDates" />
                    <a href="/alliances" class="dragon-btn">← Back to Alliances</a>
                </div>
            </div>

            <ErrorAlert ErrorMessage="@ErrorMessage" OnErrorCleared="ClearError" />

            <div class="dragon-detail-grid">
                <div class="dragon-stats-card">
                    <h3 class="dragon-card-title">🛡️ Alliance Stats</h3>
                    <div class="dragon-stats-list">
                        <div class="dragon-stat-item">
                            <span class="dragon-stat-label">🆔 Alliance ID:</span>
                            <span class="dragon-stat-value">@Alliance.AllianceId</span>
                        </div>
                        <div class="dragon-stat-item">
                            <span class="dragon-stat-label">⚡ Power:</span>
                            <span class="dragon-stat-value dragon-power-value">@Alliance.Power.ToString("N0")</span>
                        </div>
                        <div class="dragon-stat-item">
                            <span class="dragon-stat-label">👥 Members:</span>
                            <span class="dragon-stat-value">@Alliance.MemberCount</span>
                        </div>
                        <div class="dragon-stat-item">
                            <span class="dragon-stat-label">🏰 Fortress:</span>
                            <span class="dragon-stat-value">Level @Alliance.FortressLevel</span>
                        </div>
                        <div class="dragon-stat-item">
                            <span class="dragon-stat-label">📍 Location:</span>
                            <span class="dragon-stat-value">(@Alliance.FortressX, @Alliance.FortressY)</span>
                        </div>
                    </div>
                </div>

                <div class="dragon-members-card">
                    <h3 class="dragon-card-title">👥 Members: @(AllianceMembers?.TotalCount ?? 0)</h3>
                    <div class="dragon-members-content">
                        @if (IsLoadingMembers)
                        {
                            <LoadingSpinner LoadingText="Loading members..." />
                        }
                        else if (AllianceMembers?.Items?.Any() == true)
                        {
                            <div class="dragon-member-list">
                                @foreach (var member in AllianceMembers.Items)
                                {
                                    <div class="dragon-list-item dragon-member-item-slim" @onclick="() => NavigateToPlayer(member.PlayerId)">
                                        <div class="dragon-item-header">
                                            <span class="dragon-item-name">⚔️ @member.Name</span>
                                            <div class="dragon-item-badge">
                                                @member.Might.ToString("N0")
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>

                            <Pagination CurrentPage="CurrentMemberPage" TotalPages="AllianceMembers.TotalPages"
                                       OnPageChanged="OnMemberPageChanged" />
                        }
                        else
                        {
                            <p class="dragon-text-muted">🚫 No members found for this alliance.</p>
                        }
                    </div>
                </div>
            </div>

            @if (AllianceHistory?.Any() == true)
            {
                <div class="dragon-history-card">
                    <h3 class="dragon-card-title">📈 Alliance History</h3>
                    <div class="dragon-history-content">
                        <div class="dragon-history-timeline">
                            @foreach (var entry in AllianceHistory.OrderByDescending(h => h.ValidFrom))
                            {
                                <div class="dragon-timeline-item">
                                    <div class="dragon-timeline-date">
                                        📅 @entry.ValidFrom.ToString("MMM dd, yyyy")
                                    </div>
                                    <div class="dragon-timeline-content">
                                        @{
                                            var changeDescription = GetAllianceChangeDescription(entry, AllianceHistory);
                                        }
                                        @if (!string.IsNullOrEmpty(changeDescription))
                                        {
                                            <div class="dragon-change-badge dragon-change-@GetChangeTypeCssClass(entry.ChangeType)">
                                                @changeDescription
                                            </div>
                                        }
                                        <div class="dragon-alliance-data">
                                            <strong>🛡️ @entry.Data.Name</strong>
                                            <br />
                                            <small class="dragon-text-muted">
                                                ⚡ Power: @entry.Data.Power.ToString("N0") |
                                                👥 Members: @entry.Data.MemberCount |
                                                🏰 Fortress: Level @entry.Data.FortressLevel
                                            </small>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else if (IsLoading)
    {
        <LoadingSpinner LoadingText="Loading alliance details..." />
    }
    else
    {
        <div class="dragon-error">
            ⚠️ Alliance not found for the selected date.
        </div>
    }
</div>

@code {
    [Parameter] public string RealmId { get; set; } = string.Empty;
    [Parameter] public string AllianceId { get; set; } = string.Empty;
    [SupplyParameterFromQuery] public string? Date { get; set; }

    private bool IsLoading = true;
    private bool IsLoadingMembers = false;
    private string? ErrorMessage;
    private AllianceDto? Alliance;
    private PagedResult<PlayerDto>? AllianceMembers;
    private List<HistoryEntryDto<AllianceDto>>? AllianceHistory;
    private List<DateTime> AvailableDates = new();
    
    private int CurrentMemberPage = 1;
    private const int MemberPageSize = 6;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Subscribe to date changes
            DateState.DateChanged += OnDateStateChanged;
            
            // Parse date parameter if provided
            if (!string.IsNullOrEmpty(Date) && DateTime.TryParse(Date, out var parsedDate))
            {
                DateState.SetSelectedDate(parsedDate);
            }

            await LoadAllianceData();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to initialize alliance details: {ex.Message}";
            IsLoading = false;
        }
    }

    private async Task LoadAllianceData()
    {
        try
        {
            IsLoading = true;
            ErrorMessage = string.Empty;

            if (!string.IsNullOrEmpty(RealmId))
            {
                var loadedAlliance = await AllianceService.GetAllianceAsync(AllianceId, RealmId, DateState.SelectedDate.Value);
                Alliance = loadedAlliance;
                await LoadMembers();

                // Always load history
                if (AllianceHistory == null)
                {
                    AllianceHistory = await AllianceService.GetAllianceHistoryAsync(AllianceId, RealmId);
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to load alliance data: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task LoadMembers()
    {
        try
        {
            IsLoadingMembers = true;
            if (!string.IsNullOrEmpty(RealmId))
            {
                AllianceMembers = await AllianceService.GetAllianceMembersAsync(AllianceId, RealmId, DateState.SelectedDate.Value, CurrentMemberPage, MemberPageSize);
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to load alliance members: {ex.Message}";
        }
        finally
        {
            IsLoadingMembers = false;
        }
    }

    private async Task LoadMemberPage(int page)
    {
        CurrentMemberPage = page;
        await LoadMembers();
    }

    private async Task OnMemberPageChanged(int page)
    {
        CurrentMemberPage = page;
        await LoadMembers();
        StateHasChanged();
    }

    private void NavigateToPlayer(string playerId)
    {
        Navigation.NavigateTo($"/players/{RealmId}/{playerId}?date={DateState.SelectedDate:yyyy-MM-dd}");
    }

    private async void OnDateStateChanged(DateTime? newDate)
    {
        await InvokeAsync(async () =>
        {
            await LoadAllianceData();
            StateHasChanged();
        });
    }

    private void ClearError()
    {
        ErrorMessage = string.Empty;
    }

    private string GetChangeTypeCssClass(string changeType)
    {
        return changeType.ToLower() switch
        {
            "added" => "positive",
            "modified" => "neutral",
            "removed" => "negative",
            _ => "neutral"
        };
    }

    private string GetAllianceChangeDescription(HistoryEntryDto<AllianceDto> entry, List<HistoryEntryDto<AllianceDto>> allHistory)
    {
        var changeType = entry.ChangeType.ToLower();

        if (changeType == "added")
        {
            return "Alliance established";
        }
        else if (changeType == "removed")
        {
            return "Alliance disbanded";
        }
        else if (changeType == "modified")
        {
            // Find the previous entry to compare changes
            var previousEntry = allHistory
                .Where(h => h.ValidFrom < entry.ValidFrom)
                .OrderByDescending(h => h.ValidFrom)
                .FirstOrDefault();

            if (previousEntry != null)
            {
                var changes = new List<string>();

                if (entry.Data.Name != previousEntry.Data.Name)
                    changes.Add("name change");
                if (entry.Data.Power != previousEntry.Data.Power)
                    changes.Add("power change");
                if (entry.Data.MemberCount != previousEntry.Data.MemberCount)
                    changes.Add("member change");
                if (entry.Data.FortressLevel != previousEntry.Data.FortressLevel)
                    changes.Add("fortress level change");
                if (entry.Data.OverlordName != previousEntry.Data.OverlordName)
                    changes.Add("leadership change");

                return changes.Any() ? string.Join(", ", changes) : "Alliance updated";
            }

            return "Alliance updated";
        }

        return string.Empty;
    }

    public void Dispose()
    {
        DateState.DateChanged -= OnDateStateChanged;
    }
}
