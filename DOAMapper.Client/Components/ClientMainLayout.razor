@using DOAMapper.Shared.Services
@using DOAMapper.Shared.Models.Authentication
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@implements IDisposable

@if (IsLoading)
{
    <div class="loading-layout">
        <div class="loading-content">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Checking authentication...</p>
        </div>
    </div>
}
else if (IsAdminPage && !IsAuthenticated && !IsLoginPage)
{
    <!-- Will redirect to login for admin pages -->
    <div class="loading-layout">
        <div class="loading-content">
            <p>Redirecting to login...</p>
        </div>
    </div>
}
else
{
    @if (IsLoginPage)
    {
        <!-- Login page without dragon theme wrapper -->
        <div class="page">
            <main class="full-width">
                <article class="content px-4">
                    @ChildContent
                </article>
            </main>
        </div>
    }
    else
    {
        <!-- Dragon theme for all non-login pages -->
        <div class="dragon-compass"></div>

        <div class="dragon-container">
            <div class="dragon-header">
                <div class="dragon-logo">
                    <img src="logo.jpeg" alt="Dragon Realm Explorer Logo" class="dragon-logo-img" />
                </div>
                <h1 class="dragon-title">Atlas of Atlantis</h1>
            </div>

            <div class="dragon-content">
                @ChildContent
            </div>
        </div>
    }
}

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

<style>
    .loading-layout {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, var(--doa-bg-primary) 0%, var(--doa-bg-secondary) 100%);
        position: relative;
    }

    .loading-layout::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: radial-gradient(circle at 50% 50%, rgba(139, 92, 246, 0.1) 0%, transparent 70%);
        animation: pulse 3s ease-in-out infinite;
    }

    @@keyframes pulse {
        0%, 100% { opacity: 0.3; }
        50% { opacity: 0.7; }
    }

    .loading-content {
        text-align: center;
        position: relative;
        z-index: 1;
        background: var(--doa-bg-surface);
        padding: var(--doa-space-8);
        border-radius: var(--doa-radius-xl);
        border: 1px solid var(--doa-border-primary);
        box-shadow: var(--doa-shadow-lg);
    }

    .loading-content p {
        color: var(--doa-text-secondary);
        margin-top: var(--doa-space-3);
        font-weight: var(--doa-font-medium);
    }

    .full-width {
        width: 100%;
    }

    .spinner-border {
        color: var(--doa-secondary-500);
        width: 3rem;
        height: 3rem;
    }
</style>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private bool IsLoading = true;
    private bool IsAuthenticated = false;
    private bool IsAdmin = false;
    private bool IsLoginPage => Navigation.Uri.EndsWith("/login", StringComparison.OrdinalIgnoreCase);
    private bool IsAdminPage => Navigation.Uri.Contains("/import") || Navigation.Uri.Contains("/history");

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to authentication state changes
        AuthService.AuthenticationStateChanged += OnAuthenticationStateChanged;

        await CheckAuthenticationState();
    }

    private async Task CheckAuthenticationState()
    {
        try
        {
            IsAuthenticated = await AuthService.IsAuthenticatedAsync();
            IsAdmin = await AuthService.IsAdminAsync();

            // Only redirect to login if trying to access admin page without authentication
            if (IsAdminPage && !IsAuthenticated && !IsLoginPage)
            {
                Navigation.NavigateTo("/login", true);
                return;
            }

            // Redirect to players if trying to access admin page without admin rights
            if (IsAdminPage && IsAuthenticated && !IsAdmin)
            {
                Navigation.NavigateTo("/players", true);
                return;
            }
        }
        catch (Exception)
        {
            // On error, assume not authenticated
            IsAuthenticated = false;

            // Only redirect to login if on admin page
            if (IsAdminPage && !IsLoginPage)
            {
                Navigation.NavigateTo("/login", true);
                return;
            }
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async void OnAuthenticationStateChanged(AuthenticationState newState)
    {
        await InvokeAsync(async () =>
        {
            IsAuthenticated = newState.IsAuthenticated;
            IsAdmin = newState.IsAdmin;

            // Only redirect to login if trying to access admin page without authentication
            if (IsAdminPage && !IsAuthenticated && !IsLoginPage)
            {
                Navigation.NavigateTo("/login", true);
            }
            else if (IsAdminPage && IsAuthenticated && !IsAdmin)
            {
                Navigation.NavigateTo("/players", true);
            }

            StateHasChanged();
        });
    }

    public void Dispose()
    {
        AuthService.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}
