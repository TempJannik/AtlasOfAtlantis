@using DOAMapper.Shared.Services
@using DOAMapper.Shared.Models.Authentication
@inject IAuthenticationService AuthService
@inject IAuthenticationStateService AuthStateService
@implements IDisposable

@*
Client sidebar navigation disabled - replaced by dragon theme tabbed navigation in DragonRealmBrowse.razor
All navigation functionality including admin access and logout is now handled in the main tabbed interface.
*@

<!-- Navigation is now handled by the dragon theme tabbed interface -->

<style>
    /* User status section */
    .nav-item .nav-link.text-muted {
        background: var(--doa-bg-elevated);
        border: 1px solid var(--doa-border-secondary);
        border-radius: var(--doa-radius-md);
        margin: 0 var(--doa-space-3);
        padding: var(--doa-space-3);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    /* Enhanced badges */
    .badge.bg-danger {
        background: linear-gradient(135deg, var(--doa-danger-600), var(--doa-danger-700)) !important;
        color: var(--doa-text-primary);
        font-weight: var(--doa-font-semibold);
        padding: var(--doa-space-1) var(--doa-space-3);
        border-radius: var(--doa-radius-full);
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
        box-shadow: var(--doa-shadow-sm);
    }

    .badge.bg-primary {
        background: linear-gradient(135deg, var(--doa-secondary-600), var(--doa-secondary-700)) !important;
        color: var(--doa-text-primary);
        font-weight: var(--doa-font-semibold);
        padding: var(--doa-space-1) var(--doa-space-3);
        border-radius: var(--doa-radius-full);
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
        box-shadow: var(--doa-shadow-sm);
    }

    /* Enhanced logout button */
    .btn-outline-light {
        background: transparent;
        border: 1px solid var(--doa-border-primary);
        color: var(--doa-text-secondary);
        font-weight: var(--doa-font-medium);
        transition: var(--doa-transition-base);
        margin: 0 var(--doa-space-3);
        border-radius: var(--doa-radius-md);
        position: relative;
        overflow: hidden;
    }

    .btn-outline-light::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(245, 158, 11, 0.1), transparent);
        transition: var(--doa-transition-base);
    }

    .btn-outline-light:hover {
        background: var(--doa-bg-elevated);
        border-color: var(--doa-border-accent);
        color: var(--doa-text-accent);
        box-shadow: var(--doa-shadow-md);
        transform: translateY(-1px);
    }

    .btn-outline-light:hover::before {
        left: 100%;
    }

    .btn-outline-light:active {
        transform: translateY(0);
        box-shadow: var(--doa-shadow-sm);
    }

    /* Icon styling */
    .btn-outline-light i {
        transition: var(--doa-transition-fast);
    }

    .btn-outline-light:hover i {
        transform: translateX(2px);
    }
</style>

@code {
    private bool IsAdmin = false;
    private bool IsAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to authentication state changes
        AuthService.AuthenticationStateChanged += OnAuthenticationStateChanged;
        AuthStateService.StateChanged += OnAuthStateServiceChanged;

        await UpdateAuthenticationState();
    }

    private async Task UpdateAuthenticationState()
    {
        try
        {
            IsAuthenticated = await AuthService.IsAuthenticatedAsync();
            IsAdmin = await AuthService.IsAdminAsync();
            StateHasChanged();
        }
        catch (Exception)
        {
            IsAuthenticated = false;
            IsAdmin = false;
            StateHasChanged();
        }
    }

    private async void OnAuthenticationStateChanged(AuthenticationState newState)
    {
        await InvokeAsync(async () =>
        {
            IsAuthenticated = newState.IsAuthenticated;
            IsAdmin = newState.IsAdmin;
            StateHasChanged();
        });
    }

    private async void OnAuthStateServiceChanged(AuthenticationState newState)
    {
        await InvokeAsync(() =>
        {
            IsAuthenticated = newState.IsAuthenticated;
            IsAdmin = newState.IsAdmin;
            StateHasChanged();
        });
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        // Navigation will be handled by the authentication state change
    }

    public void Dispose()
    {
        AuthService.AuthenticationStateChanged -= OnAuthenticationStateChanged;
        AuthStateService.StateChanged -= OnAuthStateServiceChanged;
    }
}
