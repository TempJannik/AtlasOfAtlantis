@inject IJSRuntime JSRuntime

<div class="responsive-container @ContainerClass" @ref="containerElement">
    @ChildContent
</div>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string ContainerClass { get; set; } = "";
    [Parameter] public bool AutoStack { get; set; } = true;
    [Parameter] public string StackBreakpoint { get; set; } = "md"; // sm, md, lg, xl
    
    private ElementReference containerElement;
    private bool isMobile = false;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CheckScreenSize();
            await JSRuntime.InvokeVoidAsync("window.addEventListener", "resize", 
                DotNetObjectReference.Create(this), "onResize");
        }
    }
    
    [JSInvokable]
    public async Task OnResize()
    {
        await CheckScreenSize();
        StateHasChanged();
    }
    
    private async Task CheckScreenSize()
    {
        try
        {
            var width = await JSRuntime.InvokeAsync<int>("window.innerWidth");
            var breakpoint = StackBreakpoint switch
            {
                "sm" => 576,
                "md" => 768,
                "lg" => 992,
                "xl" => 1200,
                _ => 768
            };
            
            isMobile = width < breakpoint;
            
            if (AutoStack && isMobile)
            {
                ContainerClass += " mobile-stack";
            }
        }
        catch (Exception)
        {
            // Fallback for SSR or when JS is not available
            isMobile = false;
        }
    }
}
