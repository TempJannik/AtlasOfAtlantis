@inject DateStateService DateState
@implements IDisposable

<div class="dragon-data-selector">
    <label class="dragon-data-label">📅 View Data From:</label>
    <select class="dragon-select" @bind="SelectedDateString" @bind:after="OnDateChanged">
        <option value="">Select Date...</option>
        @foreach (var date in DateState.AvailableDates)
        {
            <option value="@date.ToString("yyyy-MM-dd")">
                @date.ToString("MMM dd, yyyy")
            </option>
        }
    </select>
</div>

@code {
    [Parameter] public DateTime? SelectedDate { get; set; }
    [Parameter] public EventCallback<DateTime?> SelectedDateChanged { get; set; }
    [Parameter] public List<DateTime> AvailableDates { get; set; } = new();

    private string SelectedDateString
    {
        get => DateState.SelectedDate?.ToString("yyyy-MM-dd") ?? "";
        set
        {
            if (DateTime.TryParse(value, out var date))
            {
                DateState.SetSelectedDate(date);
            }
            else
            {
                DateState.SetSelectedDate(null);
            }
        }
    }

    protected override void OnInitialized()
    {
        DateState.DateChanged += OnDateStateChanged;
        DateState.AvailableDatesChanged += OnAvailableDatesChanged;

        // Initialize with provided dates if available
        if (AvailableDates.Any())
        {
            DateState.SetAvailableDates(AvailableDates);
        }

        // Initialize with provided selected date
        if (SelectedDate.HasValue)
        {
            DateState.SetSelectedDate(SelectedDate.Value);
        }
    }

    private async Task OnDateChanged()
    {
        await SelectedDateChanged.InvokeAsync(DateState.SelectedDate);
    }

    private async void OnDateStateChanged(DateTime? newDate)
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
            SelectedDateChanged.InvokeAsync(newDate);
        });
    }

    private async void OnAvailableDatesChanged(List<DateTime> newDates)
    {
        await InvokeAsync(StateHasChanged);
    }

    private string GetDateDisplayText(DateTime date)
    {
        var today = DateTime.Today;
        var daysDiff = (today - date.Date).Days;

        return daysDiff switch
        {
            0 => "Today",
            1 => "Yesterday",
            <= 7 => $"{daysDiff} Days Ago",
            <= 14 => $"{daysDiff / 7} Week{(daysDiff / 7 > 1 ? "s" : "")} Ago",
            <= 30 => $"{daysDiff / 7} Weeks Ago",
            _ => date.ToString("MMM dd, yyyy")
        };
    }

    public void Dispose()
    {
        DateState.DateChanged -= OnDateStateChanged;
        DateState.AvailableDatesChanged -= OnAvailableDatesChanged;
    }
}
