@using DOAMapper.Shared.Services
@using DOAMapper.Shared.Models.Authentication
@inject IAuthenticationService AuthService
@implements IDisposable

@*
MudBlazor-based navigation component for server-side rendering
This provides a fallback navigation structure using MudBlazor components
*@

<MudDrawer @bind-Open="@_drawerOpen"
           Elevation="2"
           Variant="@DrawerVariant.Temporary"
           Class="dragon-drawer">
    <MudDrawerHeader Class="dragon-drawer-header">
        <MudText Typo="Typo.h6" Class="dragon-drawer-title">
            <img src="logo.jpeg" alt="Atlas of Atlantis" height="24" class="me-2" />
            Atlas of Atlantis
        </MudText>
    </MudDrawerHeader>

    <MudNavMenu Class="dragon-nav-menu">
        <MudNavLink Href="/players" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.People">
            Players
        </MudNavLink>
        <MudNavLink Href="/alliances" Icon="@Icons.Material.Filled.Shield">
            Alliances
        </MudNavLink>

        @if (IsAdmin)
        {
            <MudDivider Class="my-2" />
            <MudNavGroup Title="Admin" Icon="@Icons.Material.Filled.AdminPanelSettings" Expanded="false">
                <MudNavLink Href="/import" Icon="@Icons.Material.Filled.Upload">
                    Import Data
                </MudNavLink>
                <MudNavLink Href="/history" Icon="@Icons.Material.Filled.Analytics">
                    History/Analytics
                </MudNavLink>
            </MudNavGroup>
        }
    </MudNavMenu>
</MudDrawer>

<MudAppBar Elevation="1" Class="dragon-appbar">
    <MudIconButton Icon="@Icons.Material.Filled.Menu"
                   Color="Color.Inherit"
                   Edge="Edge.Start"
                   OnClick="@ToggleDrawer" />
    <MudText Typo="Typo.h6" Class="dragon-appbar-title">Atlas of Atlantis</MudText>
    <MudSpacer />
    @if (IsAuthenticated)
    {
        <MudChip T="string" Color="Color.Primary" Size="Size.Small">
            @(IsAdmin ? "Admin" : "User")
        </MudChip>
    }
</MudAppBar>

<style>
    /* Dragon theme styling for MudBlazor navigation */
    .dragon-drawer {
        background: var(--dragon-bg-secondary);
        border-right: 1px solid var(--dragon-border-primary);
    }

    .dragon-drawer-header {
        background: var(--dragon-bg-surface);
        border-bottom: 1px solid var(--dragon-border-primary);
        padding: var(--dragon-space-4);
    }

    .dragon-drawer-title {
        color: var(--dragon-text-primary);
        font-family: var(--dragon-font-heading);
        font-weight: var(--dragon-font-semibold);
        display: flex;
        align-items: center;
    }

    .dragon-nav-menu .mud-nav-link {
        color: var(--dragon-text-secondary);
        border-radius: var(--dragon-radius-md);
        margin: var(--dragon-space-1) var(--dragon-space-3);
        transition: var(--dragon-transition-base);
    }

    .dragon-nav-menu .mud-nav-link:hover {
        background: var(--dragon-bg-surface-hover);
        color: var(--dragon-text-primary);
    }

    .dragon-nav-menu .mud-nav-link.active {
        background: linear-gradient(135deg, var(--dragon-primary), var(--dragon-primary-light));
        color: #ffffff;
    }

    .dragon-appbar {
        background: var(--dragon-bg-secondary);
        border-bottom: 1px solid var(--dragon-border-primary);
    }

    .dragon-appbar-title {
        color: var(--dragon-text-primary);
        font-family: var(--dragon-font-heading);
        font-weight: var(--dragon-font-semibold);
    }
</style>

@code {
    private bool _drawerOpen = false;
    private bool IsAdmin = false;
    private bool IsAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        AuthService.AuthenticationStateChanged += OnAuthenticationStateChanged;
        await UpdateAuthenticationState();
    }

    private async Task UpdateAuthenticationState()
    {
        try
        {
            IsAuthenticated = await AuthService.IsAuthenticatedAsync();
            IsAdmin = await AuthService.IsAdminAsync();
            StateHasChanged();
        }
        catch (Exception)
        {
            IsAuthenticated = false;
            IsAdmin = false;
            StateHasChanged();
        }
    }

    private void ToggleDrawer()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async void OnAuthenticationStateChanged(AuthenticationState newState)
    {
        await InvokeAsync(() =>
        {
            IsAuthenticated = newState.IsAuthenticated;
            IsAdmin = newState.IsAdmin;
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        AuthService.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}

