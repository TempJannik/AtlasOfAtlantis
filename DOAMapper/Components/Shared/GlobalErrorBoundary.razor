@inject DOAMapper.Services.ErrorHandlingService ErrorService
@implements IDisposable

@if (!string.IsNullOrEmpty(GlobalErrorMessage))
{
    <div class="position-fixed top-0 start-50 translate-middle-x" style="z-index: 9999; margin-top: 1rem;">
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            @GlobalErrorMessage
            <button type="button" class="btn-close" @onclick="ClearGlobalError" aria-label="Close"></button>
        </div>
    </div>
}

@ChildContent

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    
    private string? GlobalErrorMessage;

    protected override void OnInitialized()
    {
        ErrorService.GlobalErrorOccurred += OnGlobalError;
    }

    private async void OnGlobalError(string errorMessage)
    {
        GlobalErrorMessage = errorMessage;
        await InvokeAsync(StateHasChanged);
        
        // Auto-clear the error after 10 seconds
        _ = Task.Delay(10000).ContinueWith(async _ =>
        {
            if (GlobalErrorMessage == errorMessage) // Only clear if it's still the same error
            {
                GlobalErrorMessage = null;
                await InvokeAsync(StateHasChanged);
            }
        });
    }

    private void ClearGlobalError()
    {
        GlobalErrorMessage = null;
    }

    public void Dispose()
    {
        ErrorService.GlobalErrorOccurred -= OnGlobalError;
    }
}
